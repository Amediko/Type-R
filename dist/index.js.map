{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/object-plus/tools.ts","../src/object-plus/mixins.ts","../src/object-plus/eventsource.ts","../src/object-plus/events.ts","../src/traversable.ts","../src/record/attributes/updates.ts","../src/record/attributes/any.ts","../src/record/attributes/attrDef.ts","../src/record/attributes/date.ts","../src/record/attributes/basic.ts","../src/record/attributes/index.ts","../src/record/record.ts","../src/record/index.ts","../src/collection/commons.ts","../src/collection/add.ts","../src/collection/set.ts","../src/collection/remove.ts","../src/collection/index.ts","../src/relations/commons.ts","../src/relations/subsetOf.ts","../src/object-plus/index.ts","../src/validation.ts","../src/transactions.ts","../src/record/attributes/owned.ts","../src/record/attributes/shared.ts","../src/relations/from.ts","../src/relations/store.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * Simple overridable logging stubs, writing to `console` by default.\n * Node.js users might want to redirect logging somewhere.\n * \n * This is the singleton avaliable globally through `Object.log` or \n * exported [[log]] variable.\n */\n\n// Logger is the function.\nexport type Logger = ( level : LogLevel, error : string, props? : object ) => void;\n\nexport type LogLevel = 'none' | 'error' | 'warn' | 'info' | 'debug' | 'log';\n\nconst levelToNumber = {\n    none : 0, error : 1, warn : 2, info : 3, log : 4, debug : 5\n}\n\nexport interface Log extends Logger {\n    level : number\n    throw : number\n    stop : number\n    logger : Logger\n}\n\nexport const log : Log = <any>function( a_level : LogLevel, a_msg : string, a_props : object ){\n    let levelAsNumber = levelToNumber[ a_level ], msg, props, level;\n\n    if( levelAsNumber === void 0 && !a_props ){\n        levelAsNumber = 4;\n        msg = a_level;\n        props = a_msg;\n        level = 'log';\n    }\n    else{\n        msg = a_msg, level = a_level, props = a_props;\n    }\n\n    if( levelAsNumber <= log.level ){\n        if( levelAsNumber <= log.throw || !log.logger ){\n            const error = new Error( msg );\n            (error as any).props = props;\n            throw error;\n        }\n        else{\n            log.logger( level, msg, props );\n            \n            if( levelAsNumber <= log.stop ){\n                debugger;\n            }\n        }\n    }\n}\n\ndeclare var process: any;\n\nlog.level = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production' ? 1 : 2;\nlog.throw = 0;\nlog.stop = 0;\n\nif( typeof console !== 'undefined' ) {\n    log.logger = function _console( level : LogLevel, error : string, props : object ){\n        const args = [ error ];\n        for( let name in props ){\n            args.push( `\\n\\t${name}:`, props[ name ] );\n        }\n\n        console[ level ].apply( console, args );\n    }\n}\n\n/** Check if value is raw JSON */\nexport function isValidJSON( value : any ) : boolean {\n    if( value === null ){\n        return true;\n    }\n\n    switch( typeof value ){\n    case 'number' :\n    case 'string' :\n    case 'boolean' :\n        return true;\n\n    case 'object':\n        var proto = Object.getPrototypeOf( value );\n\n        if( proto === Object.prototype || proto === Array.prototype ){\n            return every( value, isValidJSON );\n        }\n    }\n\n    return false;\n}\n\n/** Get the base class constructor function.\n * @param Class Subclass constructor function.\n * @returns Base class constructor function.\n */\nexport function getBaseClass( Class : Function ) {\n    return Object.getPrototypeOf( Class.prototype ).constructor\n}\n\nexport function assignToClassProto<T, K extends keyof T>( Class, definition : T, ...names : K[] ) : void {\n    for( let name of names ){\n        const value = definition[ name ];\n        value === void 0 || ( Class.prototype[ name ] = value );\n    }\n}\n\n/** Checks whenever given object is an empty hash `{}` */\nexport function isEmpty( obj : {} ) : boolean {\n    if( obj ){\n        for( let key in obj ){\n            if( obj.hasOwnProperty( key ) ){\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport type Iteratee = ( value : any, key? : string | number ) => any;\n\n/** @hidden */\nfunction someArray( arr : any[], fun : Iteratee ) : any {\n    let result;\n\n    for( let i = 0; i < arr.length; i++ ){\n        if( result = fun( arr[ i ], i ) ){\n            return result;\n        }\n    }\n}\n\n/** @hidden */\nfunction someObject( obj : {}, fun : Iteratee ) : any {\n    let result;\n\n    for( let key in obj ){\n        if( obj.hasOwnProperty( key ) ){\n            if( result = fun( obj[ key ], key ) ){\n                return result;\n            }\n        }\n    }\n}\n\n/** Similar to underscore `_.some` */\nexport function some( obj, fun : Iteratee ) : any {\n    if( Object.getPrototypeOf( obj ) === ArrayProto ){\n        return someArray( obj, fun );\n    }\n    else{\n        return someObject( obj, fun );\n    }\n}\n\n/** Similar to underscore `_.every` */\nexport function every( obj : { }, predicate : Iteratee ) : boolean {\n    return !some( obj, x => !predicate( x ) );\n}\n\n/** Similar to `getOwnPropertyDescriptor`, but traverse the whole prototype chain. */\nexport function getPropertyDescriptor( obj : {}, prop : string ) : PropertyDescriptor {\n    let desc : PropertyDescriptor;\n\n    for( let proto = obj; !desc && proto; proto = Object.getPrototypeOf( proto ) ) {\n        desc = Object.getOwnPropertyDescriptor( proto, prop );\n    }\n\n    return desc;\n}\n\n/** Similar to underscore `_.omit` */\nexport function omit( source : {}, ...rest : string[] ) : {}\nexport function omit( source ) : {} {\n    const dest = {}, discard = {};\n\n    for( let i = 1; i < arguments.length; i ++ ){\n        discard[ arguments[ i ] ] = true;\n    }\n\n    for( var name in source ) {\n        if( !discard.hasOwnProperty( name ) && source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** map `source` object properties with a given function, and assign the result to the `dest` object.\n * When `fun` returns `undefined`, skip this value. \n */\nexport function transform< A, B >( dest : { [ key : string ] : A }, source : { [ key : string ] : B }, fun : ( value : B, key : string ) => A | void ) : { [ key : string ] : A } {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            var value = fun( source[ name ], name );\n            value === void 0 || ( dest[ name ] = < A >value );\n        }\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastAssign< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        dest[ name ] = source[ name ];\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastDefaults< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        if( dest[ name ] === void 0 ){\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.extend` and `Object.assign` */\nexport function assign< T >( dest : T, ...sources : Object[] ) : T\nexport function assign< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && assign( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.defaults` */\nexport function defaults< T >( dest : T, ...sources : Object[] ) : T\nexport function defaults< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) && !dest.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && defaults( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n// Polyfill for IE10. Should fix problems with babel and statics inheritance.\ndeclare global {\n    interface ObjectConstructor {\n        setPrototypeOf( target : Object, proto : Object );\n    }\n}\n\nObject.setPrototypeOf || ( Object.setPrototypeOf = defaults ); \n\n/** Similar to underscore `_.keys` */\nexport function keys( o : any ) : string[]{\n    return o ? Object.keys( o ) : [];\n}\n\n/** Similar to underscore `_.once` */\nexport function once( func : Function ) : Function {\n    var memo, first = true;\n    return function() {\n        if ( first ) {\n            first = false;\n            memo = func.apply(this, arguments);\n            func = null;\n        }\n        return memo;\n    };\n}\n\n/** @hidden */\nconst ArrayProto = Array.prototype,\n      DateProto = Date.prototype,\n      ObjectProto = Object.prototype;\n\n/**\n * Determine whenever two values are not equal, deeply traversing \n * arrays and plain JS objects (hashes). Dates are compared by enclosed timestamps, all other\n * values are compared with strict comparison.\n */\nexport function notEqual( a : any, b : any) : boolean {\n    if( a === b ) return false;\n\n    if( a && b && typeof a == 'object' && typeof b == 'object' ) {\n        const protoA = Object.getPrototypeOf( a );\n\n        if( protoA !== Object.getPrototypeOf( b ) ) return true;\n\n        switch( protoA ){\n            case DateProto   : return +a !== +b;\n            case ArrayProto  : return arraysNotEqual( a, b );\n            case ObjectProto :\n            case null:\n                return objectsNotEqual( a, b );\n        }\n    }\n\n    return true;\n}\n\n/** @hidden */\nfunction objectsNotEqual( a, b ) {\n    const keysA = Object.keys( a );\n\n    if( keysA.length !== Object.keys( b ).length ) return true;\n\n    for( let i = 0; i < keysA.length; i++ ) {\n        const key = keysA[ i ];\n\n        if( !b.hasOwnProperty( key ) || notEqual( a[ key ], b[ key ] ) ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/** @hidden */\nfunction arraysNotEqual( a, b ) {\n    if( a.length !== b.length ) return true;\n\n    for( let i = 0; i < a.length; i++ ) {\n        if( notEqual( a[ i ], b[ i ] ) ) return true;\n    }\n\n    return false;\n}\n\n/**\n * Create an object without Object prototype members except hasOwnProperty.\n * @param obj - optional parameter to populate the hash map from.\n */\nconst HashProto = Object.create( null );\nHashProto.hasOwnProperty = ObjectProto.hasOwnProperty;\n\nexport function hashMap( obj? ){\n    const hash = Object.create( HashProto );\n    return obj ? assign( hash, obj ) : hash;\n}","/*****************************************************************\n * Mixins engine and @define metaprogramming class extensions\n *\n * Vlad Balin & Volicon, (c) 2016-2017\n */\nimport { log, assign, omit, hashMap, getPropertyDescriptor, getBaseClass, defaults, transform } from './tools'\nimport { __extends } from 'tslib'\n\nexport interface Subclass< T > extends MixableConstructor {\n    new ( ...args ) : T\n    prototype : T\n}\n\nexport interface MixableConstructor extends Function{\n    __super__? : object;\n    mixins? : MixinsState;\n    onExtend? : ( BaseClass : Function ) => void;\n    onDefine? : ( definition : object, BaseClass : Function ) => void;\n    define? : ( definition? : object, statics? : object ) => MixableConstructor;\n    extend? : <T extends object>( definition? : T, statics? : object ) => Subclass<T>;\n}\n\nexport interface MixableDefinition {\n    mixins? : Mixin[]\n}\n\n/**\n * Base class, holding metaprogramming class extensions.\n * Supports mixins and Class.define metaprogramming method.\n */\nexport class Mixable {\n    static onExtend : ( BaseClass : Function ) => void;\n    static onDefine : ( definition : object, BaseClass : Function ) => object;    \n    static __super__ : object\n    static mixins : MixinsState;\n\n    /** \n     *  Must be called after inheritance and before 'define'.\n     */\n    static define( protoProps : MixableDefinition = {}, staticProps? : object ) : MixableConstructor {\n        const BaseClass : MixableConstructor = getBaseClass( this );\n\n        // Assign statics.\n        staticProps && assign( this, staticProps );\n\n        // Extract and apply mixins from the definition.\n        const { mixins, ...defineMixin } = protoProps;\n        mixins && this.mixins.merge( mixins );\n\n        // Unshift definition to the the prototype.\n        this.mixins.mergeObject( this.prototype, defineMixin, true );\n\n        // Unshift definition from statics to the prototype.\n        this.mixins.mergeObject( this.prototype, this.mixins.getStaticDefinitions( BaseClass ), true );\n\n        // Call onDefine hook, if it's present.\n        this.onDefine && this.onDefine( this.mixins.definitions, BaseClass );\n        \n        // Apply merge rules to inherited members. No mixins can be added after this point.\n        this.mixins.mergeInheritedMembers( BaseClass );\n\n        return this;\n    }\n\n    /** Backbone-compatible extend method to be used in ES5 and for backward compatibility */\n    static extend< T extends object>(spec? : T, statics? : {} ) : Subclass< T > {\n        let TheSubclass : Subclass< T >;\n\n        // 1. Create the subclass (ES5 compatibility shim).\n        // If constructor function is given...\n        if( spec && spec.hasOwnProperty( 'constructor' ) ){\n            // ...we need to manually call internal TypeScript __extend function. Hack! Hack!\n            TheSubclass = spec.constructor as any;\n            __extends( TheSubclass, this );\n        }\n        // Otherwise, create the subclall in usual way.\n        else{\n            TheSubclass = class Subclass extends this {} as any;\n        }\n\n        predefine( TheSubclass );\n        spec && TheSubclass.define( spec, statics );\n\n        return TheSubclass;\n    }\n}\n\n/** @decorator `@predefine` for forward definitions. Can be used with [[Mixable]] classes only.\n * Forwards the call to the [[Mixable.predefine]];\n */\nexport function predefine( Constructor : MixableConstructor ) : void {\n    const BaseClass : MixableConstructor = getBaseClass( Constructor );\n\n    // Legacy systems support\n    Constructor.__super__ = BaseClass.prototype;\n    \n    // Initialize mixins structures...\n    Constructor.define || MixinsState.get( Mixable ).populate( Constructor );\n\n    // Make sure Ctor.mixins are ready before the callback...\n    MixinsState.get( Constructor );\n\n    // Call extend hook.\n    Constructor.onExtend && Constructor.onExtend( BaseClass );\n}\n\n/** @decorator `@define` for metaprogramming magic. Can be used with [[Mixable]] classes only.\n *  Forwards the call to [[Mixable.define]].\n */\nexport function define( ClassOrDefinition : Function ) : void;\nexport function define( ClassOrDefinition : object ) : ClassDecorator;\nexport function define( ClassOrDefinition : object | MixableConstructor ){\n    // @define class\n    if( typeof ClassOrDefinition === 'function' ){\n        predefine( ClassOrDefinition );\n        ClassOrDefinition.define();\n    }\n    // @define({ prop : val, ... }) class\n    else{\n        return function( Ctor : MixableConstructor ){\n            predefine( Ctor );\n            Ctor.define( ClassOrDefinition );\n        }\n    }\n}\n\nexport function definitions( rules : MixinMergeRules ) : ClassDecorator {\n    return ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.definitionRules = defaults( hashMap(), rules, mixins.definitionRules );\n    }\n}\n\nexport function definitionDecorator( definitionKey, value ){\n    return ( proto : object, name : string ) => {\n        MixinsState\n            .get( proto.constructor )\n            .mergeObject( proto, {\n                [ definitionKey ] : {\n                    [ name ] : value\n                }\n            });\n    }\n}\n\nexport class MixinsState {\n    mergeRules : MixinMergeRules;\n    definitionRules : MixinMergeRules;\n    definitions : object = {};\n    appliedMixins : Mixin[];\n\n    // Return mixins state for the class. Initialize if it's not exist.\n    static get( Class ) : MixinsState {\n        const { mixins } = Class;\n    \n        return mixins && Class === mixins.Class ? mixins :\n             Class.mixins = new MixinsState( Class );\n    }\n\n    constructor( public Class : MixableConstructor ){\n        const { mixins } = getBaseClass( Class );\n\n        this.mergeRules = ( mixins && mixins.mergeRules ) || hashMap();\n        this.definitionRules = ( mixins && mixins.definitionRules ) || hashMap();\n        this.appliedMixins = ( mixins && mixins.appliedMixins ) || [];\n    }\n\n    getStaticDefinitions( BaseClass : Function ){\n        const definitions = hashMap(),\n            { Class } = this;\n\n        return transform( definitions, this.definitionRules, ( rule, name ) =>{\n            if( BaseClass[ name ] !== Class[ name ]){\n                return Class[ name ];\n            }\n        });\n    }\n\n    merge( mixins : Mixin[] ){\n        const proto      = this.Class.prototype,\n            { mergeRules } = this;\n\n        // Copy applied mixins array as it's going to be updated.\n        const appliedMixins = this.appliedMixins = this.appliedMixins.slice();\n\n        // Apply mixins in sequence...\n        for( let mixin of mixins ) {\n            // Mixins array should be flattened.\n            if( Array.isArray( mixin ) ) {\n                this.merge( mixin );\n            }\n            // Don't apply mixins twice.\n            else if( appliedMixins.indexOf( mixin ) < 0 ){\n                appliedMixins.push( mixin );\n\n                // For constructors, merge _both_ static and prototype members.\n                if( typeof mixin === 'function' ){\n                    if( getBaseClass( mixin ) !== Object ){\n                        //TODO log error\n                        console.log( 'Mixin error' );\n                    }\n\n                    // Merge static members\n                    this.mergeObject( this.Class, mixin );\n\n                    // merge definitionRules and mergeRules\n                    const sourceMixins = ( mixin as any ).mixins;\n                    if( sourceMixins ){\n                        this.mergeRules = defaults( hashMap(), this.mergeRules, sourceMixins.mergeRules );\n                        this.definitionRules = defaults( hashMap(), this.definitionRules, sourceMixins.definitionRules );\n                        this.appliedMixins = this.appliedMixins.concat( sourceMixins.appliedMixins );\n                    }\n\n                    // Prototypes are merged according with rules.\n                    this.mergeObject( proto, mixin.prototype );\n                }\n                // Handle plain object mixins.\n                else {\n                    this.mergeObject( proto, mixin );\n                }\n            }\n        }\n    }\n\n    populate( ...ctors : Function[] ){\n        for( let Ctor of ctors ) {\n            MixinsState.get( Ctor ).merge([ this.Class ]);\n        }\n    }\n\n    mergeObject( dest : object, source : object, unshift? : boolean ) {\n        forEachOwnProp( source, name => {\n            const sourceProp = Object.getOwnPropertyDescriptor( source, name );\n            let rule : MixinMergeRule;\n\n            if( rule = this.definitionRules[ name ] ){\n                assignProperty( this.definitions, name, sourceProp, rule, unshift );\n            }\n\n            if( !rule || rule === mixinRules.protoValue  ){\n                assignProperty( dest, name, sourceProp, this.mergeRules[ name ], unshift );\n            }\n        });\n    }\n\n    mergeInheritedMembers( BaseClass : Function ){\n        const { mergeRules, Class } = this;\n\n        if( mergeRules ){\n            const proto = Class.prototype,\n                baseProto = BaseClass.prototype;\n\n            for( let name in mergeRules ) {\n                const rule = mergeRules[ name ];\n\n                if( proto.hasOwnProperty( name ) && name in baseProto ){\n                    proto[ name ] = resolveRule( proto[ name ], baseProto[ name ], rule );\n                }\n            }\n        }\n    }\n}\n\nconst dontMix = {\n    function : hashMap({\n        length : true,\n        prototype : true,\n        caller : true,\n        arguments : true,\n        name : true,\n        __super__ : true\n    }),\n    \n    object : hashMap({\n        constructor : true\n    })    \n}\n\nfunction forEachOwnProp( object : object, fun : ( name : string ) => void ){\n    const ignore = dontMix[ typeof object ];\n\n    for( let name of Object.getOwnPropertyNames( object ) ) {\n        ignore[ name ] || fun( name );\n    }\n}\n\nexport interface MixinMergeRules {\n    [ name : string ] : MixinMergeRule\n}\n\nexport type MixinMergeRule = ( a : any, b : any ) => any\nexport type Mixin = { [ key : string ] : any } | Function\n\n// @mixins( A, B, ... ) decorator.\nexport interface MixinRulesDecorator {\n    ( rules : MixinMergeRules ) : ClassDecorator\n    value( a : object, b : object) : object;\n    protoValue( a : object, b : object) : object;\n    merge( a : object, b : object ) : object;\n    pipe( a: Function, b : Function ) : Function;\n    defaults( a: Function, b : Function ) : Function;\n    classFirst( a: Function, b : Function ) : Function;\n    classLast( a: Function, b : Function ) : Function;\n    every( a: Function, b : Function ) : Function;\n    some( a: Function, b : Function ) : Function;\n}\n\nexport const mixins = ( ...list : Mixin[] ) => (\n    ( Class : Function ) => MixinsState.get( Class ).merge( list )\n);\n\n// @mixinRules({ name : rule, ... }) decorator.\nexport const mixinRules = ( ( rules : MixinMergeRules ) => (\n    ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.mergeRules = defaults( rules, mixins.mergeRules );\n    }\n) ) as MixinRulesDecorator;\n\n// Pre-defined mixin merge rules\n\nmixinRules.value = ( a, b ) => a;\n\nmixinRules.protoValue = ( a, b ) => a;\n\n// Recursively merge members\nmixinRules.merge = ( a, b ) => defaults( {}, a, b );\n\n    // Execute methods in pipe, with the class method executed last.\nmixinRules.pipe = ( a, b ) => (\n    function( x : any ) : any {\n        return a.call( this, b.call( this, x ) );\n    }\n);\n\n    // Assume methods return an object, and merge results with defaults (class method executed first)\nmixinRules.defaults = ( a : Function, b : Function ) => (\n    function() : object {\n        return defaults( a.apply( this, arguments ), b.apply( this, arguments ) );\n    }\n);\n\n// Execute methods in sequence staring with the class method.\nmixinRules.classFirst = ( a : Function, b : Function ) => (\n    function() : void {\n        a.apply( this, arguments );\n        b.apply( this, arguments );\n    }\n);\n\n    // Execute methods in sequence ending with the class method.\nmixinRules.classLast = ( a : Function, b : Function ) => (\n    function() : void {\n        b.apply( this, arguments );\n        a.apply( this, arguments );\n    }\n)\n\n    // Execute methods in sequence returning the first falsy result.\nmixinRules.every = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) && b.apply( this, arguments );\n    }\n);\n    // Execute methods in sequence returning the first truthy result.\nmixinRules.some = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) || b.apply( this, arguments );\n    }\n);\n\n/**\n * Helpers\n */\n\nfunction assignProperty( dest : object, name : string, sourceProp : PropertyDescriptor, rule : MixinMergeRule, unshift? : boolean ){\n// Destination prop is defined, thus the merge rules must be applied.\n    if( dest.hasOwnProperty( name ) ){\n        const destProp = Object.getOwnPropertyDescriptor( dest, name );\n\n        if( destProp.configurable && 'value' in destProp ){\n            dest[ name ] = unshift ?\n                resolveRule( sourceProp.value, destProp.value, rule ) :\n                resolveRule( destProp.value, sourceProp.value, rule ) ;\n        }\n    }\n    // If destination is empty, just copy the prop over.\n    else{\n        Object.defineProperty( dest, name, sourceProp );\n    }\n}\n\nfunction resolveRule( dest, source, rule : MixinMergeRule ){\n    // When destination is empty, take the source.\n    if( dest === void 0 ) return source;\n\n    // In these cases we take non-empty destination:\n    if( !rule || source === void 0 ) return dest;\n\n    // In other cases we must merge values.\n    return rule( dest, source );\n}","import { once as _once } from './tools'\n\n/*******************\n * Prebuilt events map, used for optimized bulk event subscriptions.\n *\n * const events = new EventMap({\n *      'change' : true, // Resend this event from self as it is.\n *      'change:attr' : 'localTargetFunction',\n *      'executedInTargetContext' : function(){ ... }\n *      'executedInNativeContext' : '^props.handler'\n * })\n */\n/** @hidden */\nexport interface EventsDefinition {\n    [ events : string ] : Function | string | boolean\n}\n\n/** @hidden */\nexport class EventMap {\n    handlers : EventDescriptor[] = [];\n\n    constructor( map? : EventsDefinition | EventMap ){\n        if( map ){\n            if( map instanceof EventMap ){\n                this.handlers = map.handlers.slice();\n            }\n            else{\n                map && this.addEventsMap( map );\n            }\n        }\n    }\n\n    merge( map : EventMap ){\n        this.handlers = this.handlers.concat( map.handlers );\n    }\n\n    addEventsMap( map : EventsDefinition ){\n        for( let names in map ){\n            this.addEvent( names, map[ names ] )\n        }\n    }\n\n    bubbleEvents( names : string ){\n        for( let name of names.split( eventSplitter ) ){\n            this.addEvent( name, getBubblingHandler( name ) );\n        }\n    }\n\n    addEvent( names : string, callback : Function | string | boolean ){\n        const { handlers } = this;\n\n        for( let name of names.split( eventSplitter ) ){\n            handlers.push( new EventDescriptor( name, callback ) );\n        }\n    }\n\n    subscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            on( source, event.name, event.callback, target );\n        }\n    }\n\n    unsubscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            off( source, event.name, event.callback, target );\n        }\n    }\n}\n\n/** @hidden */\nexport class EventDescriptor {\n    callback : Function\n\n    constructor(\n        public name : string,\n        callback : Function | string | boolean\n    ){\n        if( callback === true ){\n            this.callback = getBubblingHandler( name );\n        }\n        else if( typeof callback === 'string' ){\n            this.callback =\n                function localCallback(){\n                    const handler = this[ callback ];\n                    handler && handler.apply( this, arguments );\n                };\n        }\n        else{\n            this.callback = <Function>callback;\n        }\n    }\n}\n\n/** @hidden */\nconst _bubblingHandlers = {};\n\n/** @hidden */\nfunction getBubblingHandler( event : string ){\n    return _bubblingHandlers[ event ] || (\n        _bubblingHandlers[ event ] = function( a?, b?, c?, d?, e? ){\n            if( d !== void 0 || e !== void 0 ) trigger5( this, event, a, b, c, d, e );\n            if( c !== void 0 ) trigger3( this, event, a, b, c );\n            else trigger2( this, event, a, b );\n        }\n    );\n}\n\n/** @hidden */\nexport interface HandlersByEvent {\n    [ name : string ] : EventHandler\n}\n\n/** @hidden */\nexport class EventHandler {\n    constructor( public callback : Callback, public context : any, public next = null ){}\n}\n\n/** @hidden */\nfunction listOff( _events : HandlersByEvent, name : string, callback : Callback, context : any ){\n    const head = _events[ name ];\n\n    let filteredHead, prev;\n\n    for( let ev = head; ev; ev = ev.next ){\n        // Element must be kept\n        if( ( callback && callback !== ev.callback && callback !== ev.callback._callback ) ||\n            ( context && context !== ev.context ) ){\n            \n            prev = ev;\n            filteredHead || ( filteredHead = ev );\n        }\n        // Element must be skipped\n        else{\n            if( prev ) prev.next = ev.next;\n        }\n    }\n\n    if( head !== filteredHead ) _events[ name ] = filteredHead;\n}\n\n/** @hidden */\nfunction listSend2( head : EventHandler, a, b ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b );\n}\n\n/** @hidden */\nfunction listSend3( head : EventHandler, a, b, c ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c );\n}\n\n/** @hidden */\nfunction listSend4( head : EventHandler, a, b, c, d ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d );\n}\n\n/** @hidden */\nfunction listSend5( head : EventHandler, a, b, c, d, e ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e );\n}\n\n/** @hidden */\nfunction listSend6( head : EventHandler, a, b, c, d, e, f ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e, f );\n}\n\n/** @hidden */\nexport interface Callback extends Function {\n    _callback? : Function\n}\n\n/** @hidden */\nexport function on( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const _events = source._events || ( source._events = Object.create( null ) );\n        _events[ name ] = new EventHandler( callback, context, _events[ name ] );\n    }\n}\n\n/** @hidden */\nexport function once( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const once : Callback = _once( function(){\n            off( source, name, once );\n            callback.apply(this, arguments);\n        });\n\n        once._callback = callback;\n        on( source, name, once, context );\n    }\n}\n\n/** @hidden */\nexport function off( source : EventSource, name? : string, callback? : Callback, context? : any ) : void {\n    const { _events } = source;\n    if( _events ){\n        if( callback || context ) {\n            if( name ){\n                listOff( _events, name, callback, context );\n            }\n            else{\n                for( let name in _events ){\n                    listOff( _events, name, callback, context );\n                }\n            }\n        }\n        else if( name ){\n            _events[ name ] = void 0;\n        }\n        else{\n            source._events = void 0;\n        }\n    }\n}\n\n/** @hidden */\nexport interface EventSource {\n    _events : HandlersByEvent\n}\n\n/** @hidden */\nconst eventSplitter = /\\s+/;\n\n/** @hidden */\nexport function strings( api : ApiEntry, source : EventSource, events : string, callback : Callback, context ){\n    if( eventSplitter.test( events ) ){\n        const names = events.split( eventSplitter );\n        for( let name of names ) api( source, name, callback, context );\n    }\n    else api( source, events, callback, context );\n}\n\n/** @hidden */\nexport type ApiEntry = ( source : EventSource, event : string, callback : Callback, context? : any ) => void\n\n/*********************************\n * Event-triggering API\n */\n\n/** @hidden */\nexport function trigger2( self : EventSource, name : string, a, b ) : void {\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend2( queue, a, b );\n        listSend3( all, name, a, b );\n    }\n};\n\n/** @hidden */\nexport function trigger3( self : EventSource, name : string, a, b, c ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend3( queue, a, b, c );\n        listSend4( all, name, a, b, c );\n    }\n};\n\n/** @hidden */\nexport function trigger5( self : EventSource, name : string, a, b, c, d, e ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend5( queue, a, b, c, d, e );\n        listSend6( all, name, a, b, c, d, e );\n    }\n};","import { define, mixins, Mixable, Mixin, MixableConstructor, MixinsState, mixinRules, definitions, MixinMergeRules } from './mixins'\nimport { omit, transform } from './tools'\nimport { EventMap, EventsDefinition, EventSource, HandlersByEvent } from './eventsource'\nimport * as _eventsApi from './eventsource'\n\nconst { EventHandler, strings, on, off, once, trigger5, trigger2, trigger3 } = _eventsApi;\n\n/** @hidden */\nconst eventSplitter = /\\s+/;\n\n/** @hidden */\nlet _idCount = 0;\n\n/** @hidden */\nfunction uniqueId() : string {\n    return 'l' + _idCount++;\n}\n\nexport { EventMap, EventsDefinition }\n\nexport interface MessengerDefinition {\n    _localEvents? : EventMap\n    localEvents? : EventsDefinition\n    properties? : PropertyMap\n    [ name : string ] : any\n}\n\nexport interface PropertyMap {\n    [ name : string ] : Property\n}\n\nexport type Property = PropertyDescriptor | ( () => any )\n\n/** @hidden */\nexport interface MessengersByCid {\n    [ cid : string ] : Messenger\n}\n\n/** @hidden */\nexport type CallbacksByEvents = { [ events : string ] : Function }\n\n/*************************\n * Messenger is mixable class with capabilities of sending and receiving synchronous events.\n * This class itself can serve as both mixin and base class.\n */\n\n@define\n@definitions({\n    properties : mixinRules.merge,\n    localEvents : mixinRules.merge\n})\nexport abstract class Messenger implements Mixable, EventSource {\n    // Define extendable mixin static properties.\n    static __super__ : object;\n    static mixins : MixinsState;\n    static onExtend : ( BaseClass : Function ) => void;\n    static define : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static extend : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static onDefine({ localEvents, _localEvents, properties } : MessengerDefinition, BaseClass? : typeof Mixable ){\n        // Handle localEvents definition\n        if( localEvents || _localEvents ){\n            const eventsMap = new EventMap( this.prototype._localEvents );\n\n            localEvents && eventsMap.addEventsMap( localEvents );\n            _localEvents && eventsMap.merge( _localEvents );\n            \n            this.prototype._localEvents = eventsMap;\n        }\n\n        // Handle properties definitions...\n        if( properties ){\n            Object.defineProperties( this.prototype, transform( {}, <PropertyMap>properties, toPropertyDescriptor ) );\n        }\n    }\n\n    /** @hidden */ \n    _events : HandlersByEvent = void 0;\n\n    /** @hidden */ \n    _listeningTo : MessengersByCid = void 0\n\n    /** Unique client-only id. */\n    cid : string\n\n    /** @hidden Prototype-only property to manage automatic local events subscription */ \n    _localEvents : EventMap\n\n    /** @hidden */ \n    constructor(){\n        this.cid = uniqueId();\n        this.initialize.apply( this, arguments );\n\n        // TODO: local events subscribe?\n    }\n\n    /** Method is called at the end of the constructor */\n    initialize() : void {}\n    \n    on( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( on, this, events, callback, context );\n        else for( let name in events ) strings( on, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    once( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( once, this, events, callback, context );\n        else for( let name in events ) strings( once, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    off( events? : string | CallbacksByEvents, callback?, context? ) : this {\n        if( !events ) off( this, void 0, callback, context );\n        else if( typeof events === 'string' ) strings( off, this, events, callback, context );\n        else for( let name in events ) strings( off, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger(name : string, a?, b?, c?, d?, e? ) : this {\n        if( d !== void 0 || e !== void 0 ) trigger5( this, name, a, b, c, d, e );\n        else if( c !== void 0 ) trigger3( this, name, a, b, c );\n        else trigger2( this, name, a, b );\n        return this;\n    }\n\n    listenTo( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.on( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    listenToOnce( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.once( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    stopListening( a_source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) : this {\n        const { _listeningTo } = this;\n        if( _listeningTo ){\n            const removeAll = !( a || b ),\n                  second = !b && typeof a === 'object' ? this : b;\n\n            if( a_source ){\n                const source = _listeningTo[ a_source.cid ];\n                if( source ){\n                    if( removeAll ) delete _listeningTo[ a_source.cid ];\n                    source.off( a, second, this );\n                }\n            }\n            else if( a_source == null ){\n                for( let cid in _listeningTo ) _listeningTo[ cid ].off( a, second, this );\n\n                if( removeAll ) ( this._listeningTo = void 0 );\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Destructor. Stops messenger from listening to all objects,\n     * and stop others from listening to the messenger. \n     */\n    _disposed : boolean\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        this.stopListening();\n        this.off();\n\n        this._disposed = true;\n    }\n}\n\n/**\n * Backbone 1.2 API conformant Events mixin.\n */\nexport const Events : Messenger = <Messenger> omit( Messenger.prototype, 'constructor', 'initialize' );\n\n/**\n * Messenger Private Helpers \n */\n\nfunction toPropertyDescriptor( x : Property ) : PropertyDescriptor {\n    if( x ){\n        return typeof x === 'function' ? { get : < () => any >x } : <PropertyDescriptor> x;\n    }\n}\n\n/** @hidden */\nfunction addReference( listener : Messenger, source : Messenger ){\n      const listeningTo = listener._listeningTo || (listener._listeningTo = Object.create( null ) ),\n            cid = source.cid || ( source.cid = uniqueId() );\n\n      listeningTo[ cid ] = source;\n}","/**\n * Some sketches for reference resolution.\n *\n * \n * a : Model.from( '~collection' )\n * \n * We need two functions. One for get, and one for compile. \n */\nexport interface Traversable {\n    getStore() : Traversable\n    getOwner() : Traversable\n    get( key : string ) : any \n}\n\nconst referenceMask =  /\\^|([^.]+)/g;\n\n// Compile reference to function\nexport type ResolveReference = ( root : Traversable ) => any;  \n\nexport class CompiledReference {\n    resolve : ResolveReference\n    tail : string\n    local : boolean\n\n    constructor( reference : string, splitTail : boolean = false ){\n        const path = reference\n                        .match( referenceMask )\n                        .map( key => {\n                            if( key === '^' ) return 'getOwner()';\n\n                            if( key[ 0 ] === '~' ) return `getStore().get(\"${ key.substr( 1 ) }\")`;\n                            \n                            return key;\n                        } );\n               \n        this.tail = splitTail && path.pop();\n        this.local = !path.length;\n\n        path.unshift( 'self' );\n        \n        this.resolve = <any> new Function( 'self', `return ${ path.join('.') };` );\n    }\n}\n\nexport function resolveReference( root : Traversable, reference : string, action : ( object, key : string ) => any ) : any {\n    const path = reference.match( referenceMask ),\n          skip = path.length - 1;\n    \n    let self = root;\n\n    for( var i = 0; i < skip; i++ ){\n        const key = path[ i ];\n        switch( key ){\n            case '~' : self = self.getStore(); break;\n            case '^' : self = self.getOwner(); break;\n            default  : self = self.get( key );\n        }\n\n        // Do nothing if object on the path doesn't exist.\n        if( !self ) return;\n    }\n\n    return action( self, path[ skip ] );\n}","import { Transactional, Transaction, TransactionOptions, Owner, transactionApi } from \"../../transactions\"\nconst { begin : _begin, markAsDirty : _markAsDirty, commit } = transactionApi;\n\nimport { eventsApi } from '../../object-plus'\nconst { trigger3 } = eventsApi;\n\nexport interface ConstructorsMixin {\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n}\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\nexport type AttributesConstructor = new ( record : AttributesContainer, values : object, options : TransactionOptions ) => AttributesValues;\nexport type AttributesCopyConstructor = new ( values : object ) => AttributesValues;\n\nexport interface AttributesContainer extends Transactional, Owner, ConstructorsMixin {\n    // Attribute descriptors.\n    _attributes : AttributesDescriptors\n\n    // Attribute values.\n    attributes : AttributesValues\n\n    // Previous attribute values.\n    _previousAttributes : AttributesValues\n\n    // Changed attributes cache. \n    _changedAttributes : AttributesValues\n}\n\nexport interface AttributesValues {\n    [ name : string ] : any\n}\n\nexport interface AttributesDescriptors {\n    [ name : string ] : AttributeUpdatePipeline\n}\n\nexport interface AttributeUpdatePipeline{\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : Transaction[] ) : boolean\n}\n\n // Optimized single attribute transactional update. To be called from attributes setters\n // options.silent === false, parse === false. \nexport function setAttribute( record : AttributesContainer, name : string, value : any ) : void {\n    // Open the transaction.\n    const isRoot  = begin( record ),\n          options = {};\n\n    // Update attribute.      \n    if( record._attributes[ name ].doUpdate( value, record, options ) ){\n        // Notify listeners on changes.\n        markAsDirty( record, options );\n        trigger3( record, 'change:' + name, record, record.attributes[ name ], options );\n    }\n\n    // Close the transaction.\n    isRoot && commit( record );\n}\n\nfunction begin( record : AttributesContainer ){\n    if( _begin( record ) ){\n        record._previousAttributes = new record.AttributesCopy( record.attributes );\n        record._changedAttributes = null;\n        return true;\n    }\n    \n    return false;\n}\n\nfunction markAsDirty( record : AttributesContainer, options : TransactionOptions ){\n    // Need to recalculate changed attributes, when we have nested set in change:attr handler\n    if( record._changedAttributes ){\n        record._changedAttributes = null;\n    }\n\n    return _markAsDirty( record, options );\n}\n\n/**\n * TODO: There's an opportunity to create an optimized pipeline for primitive types and Date, which makes the majority\n * of attributes. It might create the major speedup.\n * \n * Create the dedicated pipeline for owned and shared attributes as well.\n * \n * Three elements of the pipeline:\n * - from constructor\n * - from assignment\n * - from `set`\n */\n\nexport const UpdateRecordMixin = {\n// Need to override it here, since begin/end transaction brackets are overriden. \n    transaction( this : AttributesContainer, fun : ( self : AttributesContainer ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = begin( this );\n        fun.call( this, this );\n        isRoot && commit( this );\n    },\n            \n    // Handle nested changes. TODO: propagateChanges == false, same in transaction.\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void {\n        const { _ownerKey } = child,\n              attribute = this._attributes[ _ownerKey ];\n\n        if( !attribute /* TODO: Must be an opposite, likely the bug */ || attribute.propagateChanges ) this.forceAttributeChange( _ownerKey, options );\n    },\n\n    // Simulate attribute change \n    forceAttributeChange( key : string, options : TransactionOptions = {} ){\n        // Touch an attribute in bounds of transaction\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            trigger3( this, 'change:' + key, this, this.attributes[ key ], options );\n        }\n        \n        isRoot && commit( this );\n    },\n\n    _createTransaction( this : AttributesContainer, a_values : {}, options : TransactionOptions = {} ) : Transaction {\n        const isRoot = begin( this ),\n                changes : string[] = [],\n                nested : RecordTransaction[]= [],\n                { _attributes } = this,\n                values = options.parse ? this.parse( a_values, options ) : a_values;\n\n        let unknown;\n\n        if( shouldBeAnObject( this, values ) ){\n            for( let name in values ){\n                const spec = _attributes[ name ];\n\n                if( spec ){\n                    if( spec.doUpdate( values[ name ], this, options, nested ) ){\n                        changes.push( name );\n                    }\n                }\n                else{\n                    unknown || ( unknown = [] );\n                    unknown.push( `'${ name }'` );\n                }\n            }\n\n            if( unknown ){\n                // this._log( 'warn', `Undefined attributes ${ unknown.join(', ')} are ignored!`, values );\n            }\n        }\n        \n        if( changes.length && markAsDirty( this, options ) ){\n            return new RecordTransaction( this, isRoot, nested, changes );\n        }\n        \n        // No changes, but there might be silent attributes with open transactions.\n        for( let pendingTransaction of nested ){\n            pendingTransaction.commit( this );\n        }\n\n        isRoot && commit( this );\n    }\n};\n\n// One of the main performance tricks of Type-R.\n// Create loop unrolled constructors for internal attribute hash,\n// so the hidden class JIT optimization will be engaged and they will become static structs.\n// It dramatically improves record performance.\nexport function constructorsMixin( attrDefs : AttributesDescriptors ) : ConstructorsMixin {\n    const attrs = Object.keys( attrDefs );\n\n    const AttributesCopy : AttributesCopyConstructor = new Function( 'values', `\n        ${ attrs.map( attr =>`\n            this.${ attr } = values.${ attr };\n        `).join( '' ) }\n    `) as any;\n\n    AttributesCopy.prototype = Object.prototype;\n\n    const Attributes : AttributesConstructor = new Function( 'record', 'values', 'options', `\n        var _attrs = record._attributes;\n\n        ${ attrs.map( attr =>`\n            this.${ attr } = _attrs.${ attr }.doInit( values.${ attr }, record, options );\n        `).join( '' ) }\n    `) as any;\n\n    Attributes.prototype = Object.prototype;\n\n    return { Attributes, AttributesCopy };\n}\n\nexport function shouldBeAnObject( record : AttributesContainer, values : object ){\n    if( values && values.constructor === Object ) return true;\n\n    record._log( 'warn', 'update with non-object is ignored!', { values } );\n    return false;\n}\n\n// Transaction class. Implements two-phase transactions on object's tree. \n// Transaction must be created if there are actual changes and when markIsDirty returns true. \nexport class RecordTransaction implements Transaction {\n    // open transaction\n    constructor( public object : AttributesContainer,\n                 public isRoot : boolean,\n                 public nested : Transaction[],\n                 public changes : string[] ){}\n\n    // commit transaction\n    commit( initiator? : AttributesContainer ) : void {\n        const { nested, object, changes } = this;\n\n        // Commit all pending nested transactions...\n        for( let transaction of nested ){ \n            transaction.commit( object );\n        }\n\n        // Notify listeners on attribute changes...\n        // Transaction is never created when silent option is set, so just send events out.\n        const { attributes, _isDirty } = object;\n        for( let key of changes ){\n            trigger3( object, 'change:' + key, object, attributes[ key ], _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}","import { setAttribute, AttributesContainer, AttributeUpdatePipeline, RecordTransaction } from './updates'\nimport { tools } from '../../object-plus'\nimport { Owner, Transactional, TransactionOptions } from '../../transactions'\n\nconst { notEqual, assign} = tools;\n\ndeclare global {\n    interface Function {\n        _attribute : typeof AnyType\n    }\n}\n\nexport type Transform = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => any;\nexport type ChangeHandler = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => void;\n\nexport interface AttributeOptions {\n    _attribute? : typeof AnyType\n    validate? : ( record : AttributesContainer, value : any, key : string ) => any\n    isRequired? : boolean\n    changeEvents? : boolean\n\n    type? : Function\n    value? : any\n    hasCustomDefault? : boolean\n\n    parse? : Parse\n    toJSON? : AttributeToJSON\n   \n    getHooks? : GetHook[]\n    transforms? : Transform[]\n    changeHandlers? : ChangeHandler[]\n\n    _onChange? : ChangeAttrHandler\n}\n\nexport type Parse = ( value : any, key : string ) => any;\nexport type GetHook = ( value : any, key : string ) => any;\nexport type AttributeToJSON = ( value : any, key : string ) => any\nexport type AttributeParse = ( value : any, key : string ) => any\nexport type ChangeAttrHandler = ( ( value : any, attr : string ) => void ) | string;\n\n// TODO: interface differs from options, do something obout it\nconst emptyOptions : TransactionOptions = {};\n\n/**\n * Typeless attribute. Is the base class for all other attributes.\n */\nexport class AnyType implements AttributeUpdatePipeline {\n    // Factory method to create attribute from options \n    static create( options : AttributeOptions, name : string ) : AnyType {\n        const type = options.type,\n              AttributeCtor = options._attribute || ( type ? type._attribute : AnyType );\n\n        return new AttributeCtor( name, options );\n    }\n    /**\n     * Update pipeline functions\n     * =========================\n     *\n     * Stage 0. canBeUpdated( value )\n     * - presence of this function implies attribute's ability to update in place.\n     */\n    canBeUpdated( prev, next, options : TransactionOptions ) : any {}\n\n    /**\n     * Stage 1. Transform stage\n     */\n    transform( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    // convert attribute type to `this.type`.\n    convert( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    /**\n     * Stage 2. Check if attr value is changed\n     */\n    isChanged( a : any, b : any ) : boolean {\n        return notEqual( a, b );\n    }\n\n    /**\n     * Stage 3. Handle attribute change\n     */\n    handleChange( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) {}\n\n    /**\n     * End update pipeline definitions.\n     */\n\n    // create empty object passing backbone options to constructor...\n    create() { return void 0; }\n\n    // generic clone function for typeless attributes\n    // Must be overriden in sublass\n    clone( value : any, record : AttributesContainer ) {\n        return value;\n    }\n\n    dispose( record : AttributesContainer, value : any ) : void {\n        this.handleChange( void 0, value, record, emptyOptions );\n    }\n\n    validate( record : AttributesContainer, value : any, key : string ){}\n\n    toJSON( value, key ) {\n        return value && value.toJSON ? value.toJSON() : value;\n    }\n\n    createPropertyDescriptor() : PropertyDescriptor | void {\n        const { name, getHook } = this;\n\n        if( name !== 'id' ){\n            return {\n                // call to optimized set function for single argument.\n                set( value ){\n                    setAttribute( this, name, value );\n                },\n\n                // attach get hook to the getter function, if it present\n                get : (\n                    getHook ?\n                        function() {\n                            return getHook.call( this, this.attributes[ name ], name );\n                        } :\n                        function() { return this.attributes[ name ]; }\n                )\n            }\n        }\n    }\n\n    value : any\n\n    // Used as global default value for the given metatype\n    static defaultValue : any;\n\n    type : Function\n\n    initialize( name : string, options : TransactionOptions ){}\n\n    options : AttributeOptions\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        const v = value === void 0 ? this.defaultValue() : value,\n            x = this.transform( v, void 0, record, options );\n            \n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\n        const { name } = this,\n            { attributes } = record,\n              prev = attributes[ name ];\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ name ] = next;\n\n        if( this.isChanged( next, prev ) ) {\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n            return true;\n        }\n\n        return false;\n    }\n\n    propagateChanges : boolean\n\n    _log( level : tools.LogLevel, text : string, value, record : AttributesContainer ){\n        tools.log( level, `[Attribute Update Error] ${ record.getClassName() }.${ this.name }: ` + text, {\n            'Record' : record,\n            'Attribute definition' : this,\n            'Prev. value' : record.attributes[ this.name ],\n            'New value' : value\n        });\n    }\n\n    defaultValue(){\n        return this.value;\n    }\n\n    parse : Parse\n\n    constructor( public name : string, a_options : AttributeOptions ) {        \n        // Save original options...\n        this.options = a_options;\n\n        // Clone options.\n        const options : AttributeOptions = assign( { getHooks : [], transforms : [], changeHandlers : [] }, a_options );\n        options.getHooks = options.getHooks.slice();\n        options.transforms = options.transforms.slice();\n        options.changeHandlers = options.changeHandlers.slice();\n\n        const {\n                  value, type, parse, toJSON, changeEvents,\n                  validate, getHooks, transforms, changeHandlers\n              } = options;\n\n        // Initialize default value...\n        this.value = value;\n        this.type  = type;\n\n        // TODO: An opportunity to optimize for attribute subtype.\n        if( !options.hasCustomDefault && type ){\n            this.defaultValue = this.create;\n        }\n        else if( tools.isValidJSON( value ) ){ \n            // JSON literals must be deep copied.\n            this.defaultValue = new Function( `return ${ JSON.stringify( value ) };` ) as any;\n        }\n        else{\n            this.defaultValue = this.defaultValue;\n        }\n\n        // Changes must be bubbled when they are not disabled for an attribute and transactional object.\n        this.propagateChanges = changeEvents !== false;\n\n        this.toJSON = toJSON === void 0 ? this.toJSON : toJSON;\n\n        this.validate = validate || this.validate;\n        \n        if( options.isRequired ){\n            this.validate = wrapIsRequired( this.validate );\n        }\n\n        /**\n         * Assemble pipelines...\n         */\n\n        // `convert` is default transform, which is always present...\n        transforms.unshift( this.convert );\n\n        // Attribute-level parse transform must always go first...\n        this.parse = parse || this.parse;\n\n        // Get hook from the attribute will be used first...\n        if( this.get ) getHooks.unshift( this.get );\n\n        // let subclasses configure the pipeline...\n        this.initialize.call( this, options );\n\n        // let attribute spec configure the pipeline...\n        if( getHooks.length ){\n            const getHook = this.getHook = getHooks.reduce( chainGetHooks );\n\n            const { validate } = this;\n            this.validate = function( record : AttributesContainer, value : any, key : string ){\n                return validate.call( this, record, getHook.call( record, value, key ), key );\n            }\n        }\n        \n        this.transform = transforms.length ? transforms.reduce( chainTransforms ) : this.transform;\n        \n        this.handleChange = changeHandlers.length ? changeHandlers.reduce( chainChangeHandlers ) : this.handleChange;\n    }\n\n    getHook : ( value, key : string ) => any = null\n    get : ( value, key : string ) => any\n}\n\n\nfunction chainGetHooks( prevHook : GetHook, nextHook : GetHook ) : GetHook {\n    return function( value, name ) {\n        return nextHook.call( this, prevHook.call( this, value, name ), name );\n    }\n}\n\nfunction chainTransforms( prevTransform : Transform, nextTransform : Transform ) : Transform {\n    return function( next, prev, record, options ) {\n        return nextTransform.call( this, prevTransform.call( this, next, prev, record, options ), prev, record, options );\n    }\n}\n\nfunction chainChangeHandlers( prevHandler : ChangeHandler, nextHandler : ChangeHandler ) : ChangeHandler {\n    return function( next, prev, record, options ) {\n        prevHandler.call( this, next, prev, record, options );\n        nextHandler.call( this, next, prev, record, options );\n    }\n}\n\nfunction wrapIsRequired( validate ){\n    return function( record : AttributesContainer, value : any, key : string ){\n        return value ? validate.call( this, record, value, key ) : 'Required';\n    }\n}","/**\n * Type spec engine. Declare attributes using chainable syntax,\n * and returns object with spec.\n */\nimport { Transactional } from '../../transactions'\nimport { ChangeAttrHandler, AttributeOptions, Parse } from './any'\nimport {  AttributesContainer } from './updates'\nimport { EventMap, EventsDefinition, definitionDecorator, tools } from '../../object-plus'\n\nconst { assign } = tools;\n\nexport interface AttributeCheck {\n    ( value : any, key : string ) : boolean\n    error? : any\n}\n\nexport class ChainableAttributeSpec {\n    options : AttributeOptions;\n\n    constructor( options : AttributeOptions ) {\n        // Shallow copy options, fill it with defaults.\n        this.options = { getHooks : [], transforms : [], changeHandlers : []};\n        if( options ) assign( this.options, options );\n    }\n\n    check( check : AttributeCheck, error : any ) : ChainableAttributeSpec {\n        function validate( model, value, name ){\n            if( !check.call( model, value, name ) ){\n                const msg = error || check.error || name + ' is not valid';\n                return typeof msg === 'function' ? msg.call( model, name ) : msg;\n            }\n        }\n\n        const prev = this.options.validate;\n\n        return this.metadata({\n            validate : prev ? (\n                            function( model, value, name ){\n                                return prev( model, value, name ) || validate( model, value, name );\n                            }\n                       ) : validate\n        });\n    }\n\n    get asProp(){\n        return definitionDecorator( 'attributes', this );\n    }\n\n    get isRequired() : ChainableAttributeSpec {\n        return this.metadata({ isRequired : true }); \n    }\n\n    watcher( ref : string | ( ( value : any, key : string ) => void ) ) : ChainableAttributeSpec {\n        return this.metadata({ _onChange : ref });\n    }\n\n    // Attribute-specific parse transform\n    parse( fun : Parse ) : ChainableAttributeSpec {\n        return this.metadata({ parse : fun });\n    }\n\n    toJSON( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            toJSON : typeof fun === 'function' ? fun : ( fun ? x => x && x.toJSON() : emptyFunction ) \n        });\n    }\n\n    // Attribute get hook.\n    get( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            getHooks : this.options.getHooks.concat( fun )\n        });\n    }\n\n    // Attribute set hook.\n    set( fun ) : ChainableAttributeSpec {\n        function handleSetHook( next, prev, record : AttributesContainer, options ) {\n            if( this.isChanged( next, prev ) ) {\n                const changed = fun.call( record, next, this.name );\n                return changed === void 0 ? prev : this.convert( changed, prev, record, options );\n            }\n\n            return prev;\n        }\n\n        return this.metadata({\n            transforms : this.options.transforms.concat( handleSetHook )\n        });\n    }\n\n    changeEvents( events : boolean ) : ChainableAttributeSpec {\n        return this.metadata({ changeEvents : events });\n    }\n\n    // Subsribe to events from an attribute.\n    events( map : EventsDefinition ) : ChainableAttributeSpec {\n        const eventMap = new EventMap( map );\n\n        function handleEventsSubscribtion( next, prev, record : AttributesContainer ){\n            prev && prev.trigger && eventMap.unsubscribe( record, prev );\n\n            next && next.trigger && eventMap.subscribe( record, next );\n        }\n\n        return this.metadata({\n            changeHandlers : this.options.changeHandlers.concat( handleEventsSubscribtion )\n        });\n    }\n\n    // Creates a copy of the spec.\n    get has() : ChainableAttributeSpec {\n        return this;\n    }\n\n    metadata( options : AttributeOptions ) : ChainableAttributeSpec {\n        const cloned = new ChainableAttributeSpec( this.options );\n        assign( cloned.options, options );\n        return cloned;\n    }\n\n    value( x ) : ChainableAttributeSpec {\n        return this.metadata({ value : x, hasCustomDefault : true });\n    }\n}\n\nfunction emptyFunction(){}\n\ndeclare global {\n    interface Function{\n        value : ( x : any ) => ChainableAttributeSpec;\n        isRequired : ChainableAttributeSpec;\n        asProp : PropertyDecorator\n        has : ChainableAttributeSpec;\n    }\n}\n\nFunction.prototype.value = function( x ) {\n    return new ChainableAttributeSpec( { type : this, value : x, hasCustomDefault : true } );\n};\n\nObject.defineProperty( Function.prototype, 'isRequired', {\n    get() { return this._isRequired || this.has.isRequired; },\n    set( x ){ this._isRequired = x; }\n});\n\nObject.defineProperty( Function.prototype, 'asProp', {\n    get() { return this.has.asProp; },\n});\n\nObject.defineProperty( Function.prototype, 'has', {\n    get() {\n        // workaround for sinon.js and other libraries overriding 'has'\n        return this._has || new ChainableAttributeSpec( {\n            type : this,\n            value : this._attribute.defaultValue,\n            hasCustomDefault : this._attribute.defaultValue !== void 0\n        } );\n    },\n\n    set( value ) { this._has = value; }\n} );\n\nexport function toAttributeOptions( spec : any ) : AttributeOptions {\n    let attrSpec : ChainableAttributeSpec;\n\n    if( typeof spec === 'function' ) {\n        attrSpec = spec.has;\n    }\n    else if( spec && spec instanceof ChainableAttributeSpec ) {\n        attrSpec = spec;\n    }\n    else{\n        // Infer type from value.\n        const type = inferType( spec );\n\n        // Transactional types inferred from values must have shared type. \n        if( type && type.prototype instanceof Transactional ){\n            attrSpec = (<any>type).shared.value( spec );\n        }\n        // All others will be created in regular way.\n        else{\n            attrSpec = new ChainableAttributeSpec({ type : type, value : spec, hasCustomDefault : true });\n        }\n    }\n \n    return attrSpec.options;\n}\n\nfunction inferType( value : {} ) : Function {\n    switch( typeof value ) {\n        case 'number' :\n            return Number;\n        case 'string' :\n            return String;\n        case 'boolean' :\n            return Boolean;\n        case 'undefined' :\n            return void 0;\n        case 'object' :\n            return value ? <any> value.constructor : void 0;\n    }\n}\n","/**\n * Date attribute type.\n * \n * Implements validation, cross-browser compatibility fixes, variety of Date serialization formats,\n * and optimized update pipeline.\n */\nimport { AnyType } from './any'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer } from './updates'\nimport { TransactionOptions } from '../../transactions'\nimport { ChainableAttributeSpec } from './attrDef'\n\nconst DateProto = Date.prototype;\n\n// Date Attribute\n/** @private */\nexport class DateType extends AnyType {\n    create(){\n        return new Date();\n    }\n    \n    convert( next : any, a, record ){\n        if( next == null || next instanceof Date ) return next;\n\n        const date = new Date( next ),\n              timestamp = date.getTime();\n\n        if( timestamp !== timestamp ){\n            this._log( 'warn', 'assigned with Invalid Date', next, record );\n        }\n\n        return date;\n    }\n\n    validate( model, value, name ) {\n        if( value != null ){\n            const timestamp = value.getTime(); \n            if( timestamp !== timestamp ) return name + ' is Invalid Date';\n        }\n    }\n\n    toJSON( value ) { return value && value.toISOString(); }\n\n    isChanged( a, b ) { return ( a && a.getTime() ) !== ( b && b.getTime() ); }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        // Date don't have handleChanges step.\n        return this.transform( value === void 0 ? this.defaultValue() : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        // Date don't have handleChanges step.\n        return this.isChanged( prev , attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    clone( value ) { return value && new Date( value.getTime() ); }\n    dispose(){}\n}\n\nDate._attribute = DateType;\n\nconst msDatePattern  = /\\/Date\\(([0-9]+)\\)\\//;\n\nexport class MSDateType extends DateType {\n    convert( next ) {\n        if( typeof next === 'string' ){\n            const msDate = msDatePattern.exec( next );\n            if( msDate ){\n                return new Date( Number( msDate[ 1 ] ) );\n            }\n        }\n\n        return DateType.prototype.convert.apply( this, arguments );\n    }\n\n    toJSON( value ) { return value && `/Date(${ value.getTime() })/`; }\n}\n\nexport class TimestampType extends DateType {\n    toJSON( value ) { return value && value.getTime(); }\n}\n\ndeclare global {\n    interface DateConstructor {\n        microsoft : ChainableAttributeSpec\n        timestamp :  ChainableAttributeSpec\n    }\n}\n\nObject.defineProperties( Date, {\n    microsoft : {\n        get(){\n            return new ChainableAttributeSpec({\n                type : Date,\n                _attribute : MSDateType\n            })\n        }\n    },\n\n    timestamp : {\n        get(){\n            return new ChainableAttributeSpec({\n                type : Date,\n                _attribute : TimestampType\n            })\n        }\n    }\n});\n\n// If ISO date is not supported by date constructor (such as in Safari), polyfill it.\nfunction supportsDate( date ){\n    return !isNaN( ( new Date( date ) ).getTime() );\n}\n\nif( !supportsDate('2011-11-29T15:52:30.5') ||\n    !supportsDate('2011-11-29T15:52:30.52') ||\n    !supportsDate('2011-11-29T15:52:18.867') ||\n    !supportsDate('2011-11-29T15:52:18.867Z') ||\n    !supportsDate('2011-11-29T15:52:18.867-03:30') ){\n\n    DateType.prototype.convert = function( value ){\n        return value == null || value instanceof Date ? value : new Date( safeParseDate( value ) );\n    }\n}\n\nconst numericKeys    = [ 1, 4, 5, 6, 7, 10, 11 ],\n      isoDatePattern = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n\nfunction safeParseDate( date : string ) : number {\n    var timestamp, struct : any[], minutesOffset = 0;\n\n    if( ( struct = isoDatePattern.exec( date )) ) {\n        // avoid NaN timestamps caused by undefined values being passed to Date.UTC\n        for( var i = 0, k; ( k = numericKeys[ i ] ); ++i ) {\n            struct[ k ] = +struct[ k ] || 0;\n        }\n\n        // allow undefined days and months\n        struct[ 2 ] = (+struct[ 2 ] || 1) - 1;\n        struct[ 3 ] = +struct[ 3 ] || 1;\n\n        if( struct[ 8 ] !== 'Z' && struct[ 9 ] !== undefined ) {\n            minutesOffset = struct[ 10 ] * 60 + struct[ 11 ];\n\n            if( struct[ 9 ] === '+' ) {\n                minutesOffset = 0 - minutesOffset;\n            }\n        }\n\n        timestamp =\n            Date.UTC( struct[ 1 ], struct[ 2 ], struct[ 3 ], struct[ 4 ], struct[ 5 ] + minutesOffset, struct[ 6 ],\n                    struct[ 7 ] );\n    }\n    else {\n        timestamp = Date.parse( date );\n    }\n\n    return timestamp;\n}","/**\n * Built-in JSON types attributes: Object, Array, Number, String, Boolean, and immutable class.\n * \n * Adds type assertions, default validation, and optimized update pipeline.\n */\n\nimport { AnyType } from './any'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer } from './updates'\nimport { TransactionOptions } from '../../transactions'\n\n/**\n * Custom class must be immutable class which implements toJSON() method\n * with a constructor taking json.\n */\nclass ImmutableClassType extends AnyType {\n    type : new ( value? : any ) => {}\n\n    create(){\n        return new this.type();\n    }\n\n    convert( next : any ) : any {\n        return next == null || next instanceof this.type ? next : new this.type( next );\n    }\n\n    toJSON( value ){\n        return value && value.toJSON ? value.toJSON() : value;\n    }\n\n    clone( value ) {\n        return new this.type( this.toJSON( value ) );\n    }\n\n    isChanged( a, b ){\n        return a !== b;\n    }\n}\n\nFunction.prototype._attribute = ImmutableClassType;\n\n/**\n * Optimized attribute of primitive type.\n * \n * Primitives has specialized simplified pipeline.\n */\nexport class PrimitiveType extends AnyType {\n    type : NumberConstructor | StringConstructor | BooleanConstructor\n\n    dispose(){}\n    create() { return this.type(); }\n\n    toJSON( value ) { return value; }\n\n    convert( next ) { return next == null ? next : this.type( next ); }\n\n    isChanged( a, b ) { return a !== b; }\n\n    clone( value ) { return value; }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        return this.transform( value === void 0 ? this.value : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        return prev !== ( attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    initialize(){\n        if( !this.options.hasCustomDefault ){\n            this.value = this.type();\n        }\n    }\n}\n\nBoolean._attribute = String._attribute = PrimitiveType;\n\n// Number type with special validation algothim.\n/** @private */ \nexport class NumericType extends PrimitiveType {\n    type : NumberConstructor\n\n    create(){\n        return 0;\n    }\n\n    convert( next, prev?, record? ) {\n        const num = next == null ? next : this.type( next );\n\n        if( num !== num ){\n            this._log( 'warn', 'assigned with Invalid Number', next, record );\n        }\n        \n        return num;\n    }\n\n    validate( model, value, name ) {\n        // Whatever is not symmetrically serializable to JSON, is not valid by default.\n        if( value != null && !isFinite( value ) ) {\n            return name + ' is not valid number';\n        }\n    }\n}\n\nNumber._attribute = NumericType;\n\n/**\n * Add Number.integer attrubute type\n */\ndeclare global {\n    interface NumberConstructor {\n        integer : Function\n    }\n\n    interface Window {\n        Integer : Function;\n    }\n}\n\nfunction Integer( x ){\n    return x ? Math.round( x ) : 0;\n}\nInteger._attribute = NumericType;\nNumber.integer = Integer;\n\n\nif( typeof window !== 'undefined' ){\n    window.Integer = Number.integer;\n}\n\n/**\n * Compatibility wrapper for Array type.\n * @private\n */ \nexport class ArrayType extends AnyType {\n    toJSON( value ) { return value; }\n    dispose(){}\n    create(){ return []; }\n\n    convert( next, prev, record ) {\n        // Fix incompatible constructor behaviour of Array...\n        if( next == null || Array.isArray( next ) ) return next;\n\n        this._log( 'warn', 'assignment of non-array to Array attribute is ignored', next, record );\n\n        return [];\n    }\n\n    clone( value ){\n        return value && value.slice();\n    }\n}\n\nArray._attribute = ArrayType;\n\nexport class ObjectType extends AnyType {\n    create(){ return {}; }\n\n    convert( next, prev, record ) {\n        if( next == null || typeof next === 'object' ) return next;\n                \n        this._log( 'warn', 'assignment of non-object to Object attribute is ignored', next, record );\n        return {};\n    }\n}\n\nObject._attribute = ObjectType;\n\nexport function doNothing(){}\n\nexport class FunctionType extends AnyType {\n    // Functions are not serialized.\n    toJSON( value ) { return void 0; }\n    create(){ return doNothing; }\n\n    convert( next, prev, record ) {\n        // Fix incompatible constructor behaviour of Array...\n        if( next == null || typeof next === 'function' ) return next;\n\n        this._log( 'warn', 'assigned with non-function', next, record );\n\n        return doNothing;\n    }\n\n    // Functions are not cloned.\n    clone( value ){ return value; }\n}\n\nFunction._attribute = FunctionType;","import { tools as _, eventsApi } from '../../object-plus'\n\nexport * from './any'\nexport * from './owned'\nexport * from './date'\nexport * from './basic'\nexport * from './shared'\nexport * from './updates'\nexport * from './attrDef'\n\nimport { AnyType } from './any'\nimport { ConstructorsMixin, constructorsMixin } from './updates'\nimport { toAttributeOptions, ChainableAttributeSpec } from './attrDef'\nimport { CompiledReference } from '../../traversable'\n\nexport interface RecordAttributesMixin extends ConstructorsMixin {\n    // Attributes descriptors\n    _attributes : AttributeDescriptors\n    _attributesArray : AnyType[]\n    \n    // Attribute's property descriptors\n    properties : PropertyDescriptorMap\n\n    // Attributes serialization\n    _toJSON() : any\n\n    // Event map for record's local events.\n    _localEvents? : eventsApi.EventMap\n}\n\nexport interface AttributeDescriptors {\n    [ name : string ] : AnyType\n}\n\n// Create record mixin from the given record's attributes definition\nexport default function( attributesDefinition : object, baseClassAttributes : AttributeDescriptors ) : RecordAttributesMixin {\n    const myAttributes = _.transform( {} as AttributeDescriptors, attributesDefinition, createAttribute ),\n          allAttributes = _.defaults( {} as AttributeDescriptors, myAttributes, baseClassAttributes );\n\n    const ConstructorsMixin = constructorsMixin( allAttributes );\n\n    return {\n        ...ConstructorsMixin,\n        _attributes : new ConstructorsMixin.AttributesCopy( allAttributes ),\n        _attributesArray : Object.keys( allAttributes ).map( key => allAttributes[ key ] ),\n        properties : _.transform( <PropertyDescriptorMap>{}, myAttributes, x => x.createPropertyDescriptor() ),\n        _toJSON : createToJSON( allAttributes ),\n        ...parseMixin( allAttributes ),\n        ...localEventsMixin( myAttributes )\n    }            \n}\n\n// Create attribute from the type spec.\nexport function createAttribute( spec : any, name : string ) : AnyType {\n    return AnyType.create( toAttributeOptions( spec ), name );\n}\n\nfunction parseMixin( attributes : AttributeDescriptors ){\n    const attrsWithParse = Object.keys( attributes ).filter( name => attributes[ name ].parse );\n\n    return attrsWithParse.length ? {\n        _parse : new Function( 'json', `\n            var _attrs = this._attributes;\n\n            ${ attrsWithParse.map( name => `                \n                json.${ name } === void 0 || ( json.${ name } = _attrs.${ name }.parse.call( this, json.${ name }, \"${ name }\" ) );\n            ` ).join('')}\n\n            return json;\n        ` )\n    } : {};\n}\n\nfunction createToJSON( attributes : AttributeDescriptors ) : () => void {\n    return new Function(`\n        var json = {},\n            v = this.attributes,\n            a = this._attributes;\n\n        ${ Object.keys( attributes ).map( key => {\n            if( attributes[ key ].toJSON ){\n                return `json.${key} = a.${key}.toJSON.call( this, v.${ key }, '${key}' );`;\n            }\n        } ).join( '\\n' ) }\n\n        return json;\n    `) as any;\n}\n\nexport function createSharedTypeSpec( Constructor : Function, Attribute : typeof AnyType ){\n    if( !Constructor.hasOwnProperty( 'shared' ) ){\n        Object.defineProperty( Constructor, 'shared', {\n            get(){\n                return new ChainableAttributeSpec({\n                    value : null,\n                    type : Constructor,\n                    _attribute : Attribute\n                });\n            }\n        });\n    }\n}\n\ninterface LocalEventsMixin {\n    _localEvents? : eventsApi.EventMap\n}\n\nfunction localEventsMixin( attrSpecs : AttributeDescriptors ) : LocalEventsMixin {\n    let _localEvents : eventsApi.EventMap;\n\n    for( var key in attrSpecs ){\n        const attribute = attrSpecs[ key ],\n            { _onChange } = attribute.options; \n\n        if( _onChange ){\n            _localEvents || ( _localEvents = new eventsApi.EventMap() );\n\n            _localEvents.addEvent( 'change:' + key,\n                typeof _onChange === 'string' ?\n                    createWatcherFromRef( _onChange, key ) : \n                    wrapWatcher( _onChange, key ) );\n        }\n    }\n\n    return _localEvents ? { _localEvents } : {};\n}\n\nfunction wrapWatcher( watcher, key ){\n    return function( record, value ){\n        watcher.call( record, value, key );\n    } \n}\n\nfunction createWatcherFromRef( ref : string, key : string ){\n    const { local, resolve, tail } = new CompiledReference( ref, true );\n    return local ?\n        function( record, value ){\n            record[ tail ]( value, key );\n        } :\n        function( record, value ){\n            resolve( record )[ tail ]( value, key );\n        }\n}","/**\n * Record core implementing transactional updates.\n * The root of all definitions. \n */\n\nimport { tools, eventsApi, Mixable, definitions, mixinRules, define } from '../object-plus'\n\nimport { CloneOptions, Transactional, TransactionalDefinition, Transaction, TransactionOptions, Owner } from '../transactions'\nimport { ChildrenErrors } from '../validation'\n\nimport { Collection } from '../collection'\n\nimport { AnyType, AggregatedType, setAttribute, UpdateRecordMixin, \n    AttributesValues, AttributesContainer,\n    ConstructorsMixin, AttributesConstructor, AttributesCopyConstructor } from './attributes'\n\nconst { assign, isEmpty, log } = tools;\n\n/*******************************************************\n * Record core implementation\n */\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\n// Client unique id counter\nlet _cidCounter : number = 0;\n\n/***************************************************************\n * Record Definition as accepted by Record.define( definition )\n */\nexport interface RecordDefinition extends TransactionalDefinition {\n    idAttribute? : string\n    attributes? : AttributesValues\n    collection? : object\n    Collection? : typeof Transactional\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'm',\n\n    // Name of the change event\n    _changeEventName : 'change',\n\n    // Default id attribute name\n    idAttribute : 'id'\n})\n@definitions({\n    defaults : mixinRules.merge,\n    attributes : mixinRules.merge,\n    collection : mixinRules.merge,\n    Collection : mixinRules.value,\n    idAttribute : mixinRules.protoValue\n})\nexport class Record extends Transactional implements AttributesContainer {\n    // Hack\n    static onDefine( definition, BaseClass ){}\n\n    static Collection : typeof Collection;\n    static DefaultCollection : typeof Collection;\n\n    static from : ( collectionReference : any ) => any;\n    \n    static defaults( attrs : AttributesValues ) : typeof Record {\n        return <any>this.extend({ attributes : attrs });\n    }\n    \n    static attributes : AttributesValues\n\n    /***********************************\n     * Core Members\n     */\n    // Previous attributes\n    _previousAttributes : {}\n\n    previousAttributes(){ return new this.AttributesCopy( this._previousAttributes ); } \n\n    // Current attributes    \n    attributes : AttributesValues\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.attributes; }\n\n    // Lazily evaluated changed attributes hash\n    _changedAttributes : AttributesValues\n\n    get changed(){\n        let changed = this._changedAttributes;\n\n        if( !changed ){\n            const prev = this._previousAttributes;\n            changed = {};\n\n            const { _attributes, attributes } = this;\n\n            for( let attr of this._attributesArray ){\n                const key = attr.name,\n                    value = attributes[ key ];\n\n                if( attr.isChanged( value, prev[ key ] ) ){\n                    changed[ key ] = value;\n                }\n            }\n\n            this._changedAttributes = changed;\n        }\n\n        return changed;    \n    }\n\n    changedAttributes( diff? : {} ) : boolean | {} {\n        if( !diff ) return this.hasChanged() ? assign( {}, this.changed ) : false;\n\n        var val, changed : {} | boolean = false,\n            old          = this._transaction ? this._previousAttributes : this.attributes,\n            attrSpecs    = this._attributes;\n\n        for( var attr in diff ){\n            if( !attrSpecs[ attr ].isChanged( old[ attr ], ( val = diff[ attr ] ) ) ) continue;\n            (changed || (changed = {}))[ attr ] = val;\n        }\n\n        return changed;        \n    }\n\n    hasChanged( key? : string ) : boolean {\n        const { _previousAttributes } = this;\n        if( !_previousAttributes ) return false;\n\n        return key ?\n                this._attributes[ key ].isChanged( this.attributes[ key ], _previousAttributes[ key ] ) :\n                !isEmpty( this.changed );\n    }\n\n    previous( key : string ) : any {\n        if( key ){\n            const { _previousAttributes } = this;\n            if( _previousAttributes ) return _previousAttributes[ key ];\n        }\n        \n        return null;\n    }\n\n    isNew() : boolean {\n        return this.id == null;\n    }\n\n    has( key : string ) : boolean {\n        return this[ key ] != void 0;\n    }\n\n    // Return attribute value, setting an attribute to undefined.\n    // TODO: If attribute was aggregated, don't dispose it.\n    unset( key : string, options? ) : any {\n        const value = this[ key ];\n        this.set({ [ key ] : void 0 }, { unset : true, ...options });\n        return value;\n    }\n\n    // Undocumented. Move to NestedTypes?\n    clear( options? ) : this {\n        const nullify = options && options.nullify;\n\n        this.transaction( () =>{\n            this.forEachAttr( this.attributes, ( value, key ) => this[ key ] = nullify ? null : void 0 );\n        }, options );\n\n        return this;\n    }\n\n    // Returns Record owner skipping collections. TODO: Move out\n    getOwner() : Owner {\n        const owner : any = this._owner;\n\n        // If there are no key, owner must be transactional object, and it's the collection.\n        // We don't expect that collection can be the member of collection, so we're skipping just one level up. An optimization.\n        return this._ownerKey ? owner : owner && owner._owner;\n    }\n\n    /***********************************\n     * Identity managements\n     */\n\n    // Id attribute name ('id' by default)\n    idAttribute : string;\n\n    // Fixed 'id' property pointing to id attribute\n    get id() : string | number { return this.attributes[ this.idAttribute ]; }\n    set id( x : string | number ){ setAttribute( this, this.idAttribute, x ); }\n\n    /***********************************\n     * Dynamically compiled stuff\n     */\n\n    // Attributes specifications \n    _attributes : { [ key : string ] : AnyType }\n    _attributesArray : AnyType[]\n\n    // Attributes object copy constructor\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n\n    // forEach function for traversing through attributes, with protective default implementation\n    // Overriden by dynamically compiled loop unrolled function in define.ts\n    forEachAttr( attrs : {}, iteratee : ( value : any, key? : string, spec? : AnyType ) => void ) : void {\n        const { _attributes } = this;\n        let unknown : string[];\n\n        for( let name in attrs ){\n            const spec = _attributes[ name ];\n\n            if( spec ){\n                iteratee( attrs[ name ], name, spec );\n            }\n            else{\n                unknown || ( unknown = [] );\n                unknown.push( `'${ name }'` );\n            }\n        }\n\n        if( unknown ){\n            this._log( 'warn', `attributes ${ unknown.join(', ')} are not defined`,{\n                attributes : attrs\n            } );\n        }\n    }\n\n    each( iteratee : ( value? : any, key? : string ) => void, context? : any ){\n        const fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee,\n            { attributes } = this;\n\n        for( const key in this.attributes ){\n            const value = attributes[ key ];\n            if( value !== void 0 ) fun( value, key );\n        }\n    }\n\n    // Get array of attribute keys (Record) or record ids (Collection) \n    keys() : string[] {\n        const keys : string[] = [];\n\n        this.each( ( value, key ) => value === void 0 || keys.push( key ) );\n\n        return keys;\n    }\n\n    // Get array of attribute values (Record) or records (Collection)\n    values() : any[] {\n        return this.map( value => value );\n    }\n\n    // Attributes-level serialization\n    _toJSON(){ return {}; }\n\n    // Attributes-level parse\n    _parse( data ){ return data; }\n\n    // Create record default values, optionally augmenting given values.\n    defaults( values = {} ){\n        const defaults = {},\n            { _attributesArray } = this;\n\n        for( let attr of _attributesArray ){\n            const key = attr.name,\n            value = values[ key ];\n\n            defaults[ key ] = value === void 0 ? attr.defaultValue() : value;\n        }\n\n        return defaults;\n    }\n\n    /***************************************************\n     * Record construction\n     */\n    // Create record, optionally setting an owner\n    constructor( a_values? : {}, a_options? : ConstructorOptions ){\n        super( _cidCounter++ );\n        this.attributes = {};\n        \n        const options = a_options || {},\n              values = ( options.parse ? this.parse( a_values, options ) :  a_values ) || {};\n\n        if( log.level > 1 ) typeCheck( this, values );\n\n        this._previousAttributes = this.attributes = new this.Attributes( this, values, options );\n\n        this.initialize( a_values, a_options );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    // Initialization callback, to be overriden by the subclasses \n    initialize( values?, options? ){}\n\n    // Deeply clone record, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const copy : this = new (<any>this.constructor)( this.attributes, { clone : true } );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n\n        return copy;\n    }\n\n    // Deprecated, every clone is the deep one now.\n    deepClone() : this { return this.clone() };\n\n    // Validate attributes.\n    _validateNested( errors : ChildrenErrors ) : number {\n        var length    = 0;\n\n        this.forEachAttr( this.attributes, ( value, name, attribute ) => {\n            const error = attribute.validate( this, value, name );\n\n            if( error ){\n                errors[ name ] = error;\n                length++;\n            }\n        } );\n\n        return length;\n    }\n\n    // Get attribute by key\n    get( key : string ) : any {\n        return this[ key ];\n    }\n\n    /**\n     * Serialization control\n     */\n\n    // Default record-level serializer, to be overriden by subclasses \n    toJSON() : Object {\n        const json = {};\n\n        this.forEachAttr( this.attributes, ( value, key : string, { toJSON } ) =>{\n            // If attribute serialization is not disabled, and its value is not undefined...\n            if( value !== void 0 ){\n                // ...serialize it according to its spec.\n                const asJson = toJSON.call( this, value, key );\n\n                // ...skipping undefined values. Such an attributes are excluded.\n                if( asJson !== void 0 ) json[ key ] = asJson; \n            }\n        });\n\n        return json;\n    }\n    \n    // Default record-level parser, to be overriden by the subclasses.\n    parse( data, options? : TransactionOptions ){\n        // Call dynamically compiled loop-unrolled attribute-level parse function.\n        return this._parse( data );\n    }\n\n    /**\n     * Transactional control\n     */\n\n    deepSet( name : string, value : any, options? ){\n        // Operation might involve series of nested object updates, thus it's wrapped in transaction.\n        this.transaction( () => {\n            const path  = name.split( '.' ),\n                l     = path.length - 1,\n                attr  = path[ l ];\n\n            let model = this;\n\n            // Locate the model, traversing the path.\n            for( let i = 0; i < l; i++ ){\n                const key = path[ i ];\n\n                // There might be collections in path, so use `get`.\n                let next    = model.get ? model.get( key ) : model[ key ];\n\n                // Create models, if they are not exist.\n                if( !next ){\n                    const attrSpecs = model._attributes;\n                    if( attrSpecs ){\n                        // If current object is model, create default attribute\n                        var newModel = attrSpecs[ key ].create();\n\n                        // If created object is model, nullify attributes when requested\n                        if( options && options.nullify && newModel._attributes ){\n                            newModel.clear( options );\n                        }\n\n                        model[ key ] = next = newModel;\n                    }\n                    // Silently fail in other case.\n                    else return;\n                }\n                \n                model = next;\n            }\n\n            // Set model attribute.\n            if( model.set ){\n                model.set({ [ attr ] : value }, options );\n            }\n            else{\n                model[ attr ] = value;\n            }\n        });\n\n        return this;\n    }\n            \n    // Returns owner without the key (usually it's collection)\n    get collection() : any {\n        return this._ownerKey ? null : this._owner;\n    }\n\n    // Dispose object and all childrens\n    dispose(){\n        if( this._disposed ) return;\n        \n        this.forEachAttr( this.attributes, ( value, key, attribute ) => {\n            attribute.dispose( this, value );\n        });\n\n        super.dispose();\n    }\n\n    _log( level : tools.LogLevel, text : string, props : object ) : void {\n        tools.log( level, '[Record] ' + text, {\n            'Record' : this,\n            'Attributes definition:' : this._attributes,\n            ...props\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Record';\n    }\n\n    // Dummies to \n    _createTransaction( values : object, options : TransactionOptions ) : Transaction { return void 0; }\n    // Simulate attribute change \n    forceAttributeChange : ( key : string, options : TransactionOptions ) => void\n    _onChildrenChange : ( child : Transactional, options : TransactionOptions ) => void\n};\n\nassign( Record.prototype, UpdateRecordMixin );\n\n/***********************************************\n * Helper functions\n */\n\nclass BaseRecordAttributes {\n    id : string | number\n\n    constructor( record : Record, x : AttributesValues, options : TransactionOptions ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.Attributes = BaseRecordAttributes;\n\nclass BaseRecordAttributesCopy {\n    id : string | number\n\n    constructor( x : AttributesValues ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.AttributesCopy = BaseRecordAttributesCopy;\n\nconst IdAttribute = AnyType.create({ value : void 0 }, 'id' );\nRecord.prototype._attributes = { id : IdAttribute };\nRecord.prototype._attributesArray = [ IdAttribute ];\nRecord._attribute = AggregatedType;\n\nimport { shouldBeAnObject } from './attributes'\n\nfunction typeCheck( record : Record, values : object ){\n    if( shouldBeAnObject( record, values ) ){\n        const { _attributes } = record;\n        let unknown : string[];\n\n        for( let name in values ){\n            if( !_attributes[ name ] ){\n                unknown || ( unknown = [] );\n                unknown.push( `'${ name }'` );\n            }\n        }\n\n        if( unknown ){\n            record._log( 'warn', `undefined attributes ${ unknown.join(', ')} are ignored.`, { values } );\n        }\n    }\n}","import { Record, RecordDefinition } from './record'\nimport { Mixable, tools, predefine, define, MixinsState } from '../object-plus'\nimport compile from './attributes'\nimport { Transactional } from '../transactions'\n\nimport { createSharedTypeSpec, AggregatedType, MSDateType, TimestampType, NumericType, SharedType } from './attributes'\n\nexport * from './attributes'\nexport { Record }\n\nconst { assign, defaults, omit, getBaseClass } = tools;\n\nRecord.onExtend = function( this : typeof Record, BaseClass : typeof Record ){\n    Transactional.onExtend.call( this, BaseClass );\n\n    // Create the default collection\n    const Class = this;\n\n    @predefine class DefaultCollection extends BaseClass.Collection<any> {\n        static model = Class;\n    }\n\n    this.DefaultCollection = DefaultCollection;\n\n    // If there are no collection defined in statics, use the default collection.\n    // It will appear in onDefine's definition, overriding all other settings.\n    if( Class.Collection === BaseClass.Collection ){\n        this.Collection = DefaultCollection;\n    }\n\n    // Create Class.shared modifier\n    createSharedTypeSpec( this, SharedType );\n}\n\nRecord.onDefine = function( definition : RecordDefinition, BaseClass : typeof Record ){\n    const baseProto : Record = BaseClass.prototype;\n\n    // Compile attributes spec, creating definition mixin.\n    const { properties, _localEvents, ...dynamicMixin } = compile( this.attributes = getAttributes( definition ), baseProto._attributes );\n    assign( this.prototype, dynamicMixin );\n    \n    definition.properties = defaults( definition.properties || {}, properties );\n    definition._localEvents = _localEvents;\n    \n    Transactional.onDefine.call( this, definition, BaseClass );\n\n    // Finalize the definition of the default collection.\n    this.DefaultCollection.define( definition.collection || {} );\n\n    // assign collection from the definition.\n    this.Collection = definition.Collection;\n    this.Collection.prototype.model = this;\n}\n\nRecord._attribute = AggregatedType;\ncreateSharedTypeSpec( Record, SharedType );\n\nfunction getAttributes({ defaults, attributes, idAttribute } : RecordDefinition ) {\n    const definition = attributes || defaults || {};\n    \n    // If there is an undeclared idAttribute, add its definition as untyped generic attribute.\n    if( idAttribute && !( idAttribute in definition ) ){\n        definition[ idAttribute ] = void 0;\n    }\n\n    return definition;\n}\n\ndeclare var Reflect;\n\nexport function attr( proto, attrName? ) : any {\n    if( attrName ){\n        // Called without the spec. Extract the type.\n        if( typeof Reflect !== 'undefined' && Reflect.getMetadata ){\n            Reflect\n                .getMetadata( \"design:type\", proto, attrName )\n                .asProp( proto, attrName );\n        }\n        else{\n            proto._log( 'error', 'Add import \"reflect-metadata\"; as the first line of your app.' );\n        }\n    }\n    else{\n        return proto.asProp;\n    }\n}\n\nexport function prop( spec ) : any {\n    return spec.asProp;\n}","import { Record } from '../record'\nimport { Owner, Transaction, ItemsBehavior,\n        TransactionOptions, Transactional, transactionApi } from '../transactions'\n\nimport { eventsApi, tools } from '../object-plus'\n\nconst { EventMap, trigger2, trigger3, on, off } = eventsApi,\n      { commit, markAsDirty } = transactionApi,\n      _aquire = transactionApi.aquire, _free = transactionApi.free;\n\n/** @private */\nexport interface CollectionCore extends Transactional, Owner {\n    _byId : IdIndex\n    models : Record[]\n    model : typeof Record\n    idAttribute : string // TODO: Refactor inconsistent idAttribute usage\n    _comparator : Comparator\n    get( objOrId : string | Record | Object ) : Record    \n    _itemEvents? : eventsApi.EventMap\n    _shared : number\n    _aggregationError : Record[]\n\n    _log( level : string, text : string, value : any ) : void\n}\n\n// Collection's manipulation methods elements\nexport type Elements = ( Object | Record )[];\n\nexport interface CollectionOptions extends TransactionOptions {\n    sort? : boolean\n}\n\nexport type Comparator = ( a : Record, b : Record ) => number;  \n\n/** @private */\nexport function dispose( collection : CollectionCore ) : Record[]{\n    const models = collection.models;\n\n    collection.models = [];\n    collection._byId  = {};\n\n    freeAll( collection, models );\n    return models;\n}\n\n/** @private */\nexport function convertAndAquire( collection : CollectionCore, attrs : {} | Record, options : CollectionOptions ){\n    const { model } = collection;\n    \n    let record : Record;\n\n    if( collection._shared ){\n        record = attrs instanceof model ? attrs : <Record>model.create( attrs, options );\n\n        if( collection._shared & ItemsBehavior.listen ){\n            on( record, record._changeEventName, collection._onChildrenChange, collection );\n        }\n    }\n    else{\n        record = attrs instanceof model ? ( options.merge ? attrs.clone() : attrs ) : <Record>model.create( attrs, options );\n\n        if( !_aquire( collection, record ) ){\n            const errors = collection._aggregationError || ( collection._aggregationError = [] );\n            errors.push( record );\n        }\n    }    \n\n    // Subscribe for events...\n    const { _itemEvents } = collection;\n    _itemEvents && _itemEvents.subscribe( collection, record );\n\n    return record;\n}\n\n/** @private */\nexport function free( owner : CollectionCore, child : Record, unset? : boolean ) : void {\n    if( owner._shared ){\n        if( owner._shared & ItemsBehavior.listen ){\n            off( child, child._changeEventName, owner._onChildrenChange, owner );\n        }\n    }\n    else{\n        _free( owner, child );\n        unset || child.dispose();\n    }\n\n    const { _itemEvents } = owner;\n    _itemEvents && _itemEvents.unsubscribe( owner, child );\n}\n\n/** @private */\nexport function freeAll( collection : CollectionCore, children : Record[] ) : Record[] {\n    for( let child of children ){\n        free( collection, child );\n    }\n\n    return children;\n}\n\n/**\n * Silently sort collection, if its required. Returns true if sort happened.\n * @private\n */   \nexport function sortElements( collection : CollectionCore, options : CollectionOptions ) : boolean {\n    let { _comparator } = collection;\n    if( _comparator && options.sort !== false ){\n        collection.models.sort( _comparator );\n        return true;\n    }\n\n    return false;\n}\n\n/**********************************\n * Collection Index\n * @private \n */\nexport interface IdIndex {\n    [ id : string ] : Record\n}\n\n/** @private Add record */ \nexport function addIndex( index : IdIndex, model : Record ) : void {\n    index[ model.cid ] = model;\n    var id             = model.id;\n    \n    if( id != null ){\n        index[ id ] = model;\n    }\n}\n\n/** @private Remove record */ \nexport function removeIndex( index : IdIndex, model : Record ) : void {\n    delete index[ model.cid ];\n    var id = model.id;\n    if( id != null ){\n        delete index[ id ];\n    }\n}\n\nexport function updateIndex( index : IdIndex, model : Record ){\n    delete index[ model.previous( model.idAttribute ) ];\n\n    const { id } = model;\n    id == null || ( index[ id ] = model );\n}\n\n/***\n * In Collections, transactions appears only when\n * add remove or change events might be emitted.\n * reset doesn't require transaction.\n * \n * Transaction holds information regarding events, and knows how to emit them.\n * \n * Two major optimization cases.\n * 1) Population of an empty collection\n * 2) Update of the collection (no or little changes) - it's crucial to reject empty transactions.\n */\n\n\n// Transaction class. Implements two-phase transactions on object's tree.\n/** @private */ \nexport class CollectionTransaction implements Transaction {\n    // open transaction\n    constructor(    public object : CollectionCore,\n                    public isRoot : boolean,\n                    public added : Record[],\n                    public removed : Record[],\n                    public nested : Transaction[],\n                    public sorted : boolean ){}\n\n    // commit transaction\n    commit( initiator? : Transactional ){\n        const { nested, object } = this,\n              { _isDirty } = object;\n\n        // Commit all nested transactions...\n        for( let transaction of nested ){\n            transaction.commit( object );\n        }\n\n        if( object._aggregationError ){\n            logAggregationError( object );\n        }\n\n        // Just trigger 'change' on collection, it must be already triggered for models during nested commits.\n        // ??? TODO: do it in nested transactions loop? This way appears to be more correct. \n        for( let transaction of nested ){\n            trigger2( object, 'change', transaction.object, _isDirty );\n        }\n\n        // Notify listeners on attribute changes...\n        const { added, removed } = this;\n\n        // Trigger `add` events for both model and collection.\n        for( let record of added ){\n            trigger3( record, 'add', record, object, _isDirty );\n            trigger3( object, 'add', record, object, _isDirty );\n        }\n\n        // Trigger `remove` events for both model and collection.\n        for( let record of removed ){\n            trigger3( record, 'remove', record, object, _isDirty );\n            trigger3( object, 'remove', record, object, _isDirty );\n        }\n\n        if( this.sorted ){\n            trigger2( object, 'sort', object, _isDirty );\n        }\n\n        if( added.length || removed.length ){\n            trigger2( object, 'update', object, _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}\n\nexport function logAggregationError( collection : CollectionCore ){\n    collection._log( 'error', 'added records already have an owner', collection._aggregationError );\n    collection._aggregationError = void 0;\n}","import { Transaction, transactionApi } from '../transactions'\nimport { CollectionTransaction, logAggregationError, sortElements, convertAndAquire, free, CollectionOptions, addIndex, updateIndex, CollectionCore } from './commons'\nimport { Record } from '../record'\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\nexport interface AddOptions extends CollectionOptions {\n    at? : number \n}\n\n/** @private */\nexport function addTransaction( collection : CollectionCore, items : any[], options : AddOptions, merge? : boolean ){\n    const isRoot = begin( collection ),\n          nested : Transaction[]= [];\n\n    var added = appendElements( collection, items, nested, options, merge );\n\n    if( added.length || nested.length ){\n        let needSort = sortOrMoveElements( collection, added, options );\n        if( markAsDirty( collection, options ) ){\n            return new CollectionTransaction( collection, isRoot, added, [], nested, needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n// Handle sort or insert at options for add operation. Reurns true if sort happened.\n/** @private */ \nfunction sortOrMoveElements( collection : CollectionCore, added : Record[], options : AddOptions ) : boolean {\n    let at = options.at;\n\n    // if `at` option is given, it overrides sorting option...\n    if( at != null ){\n        // Take an original collection's length. \n        const length = collection.models.length - added.length;\n\n        // Crazy Backbone rules about `at` index. I don't know what that guys smoke.\n        at = Number( at );\n        if( at < 0 ) at += length + 1;\n        if( at < 0 ) at = 0;\n        if( at > length ) at = length;\n\n        // Move added elements to desired position. In place.\n        moveElements( collection.models, at, added );\n        return false;\n    }\n\n    return sortElements( collection, options );\n}\n\n/** @private */\nfunction moveElements( source : any[], at : number, added : any[] ) : void {\n    for( var j = source.length - 1, i = j - added.length; i >= at; i--, j-- ){\n        source[ j ] = source[ i ];\n    }\n\n    for( i = 0, j = at; i < added.length; i++, j++ ){\n        source[ j ] = added[ i ];\n    }\n}\n\n// append data to model and index\n/** @private */\nfunction appendElements( collection : CollectionCore, a_items : any[], nested : Transaction[], a_options : AddOptions, forceMerge : boolean ){\n    var { _byId, models } = collection,\n        merge       = ( forceMerge || a_options.merge ) && !collection._shared,\n        parse       = a_options.parse,\n        idAttribute = collection.model.prototype.idAttribute,\n        prevLength = models.length;\n\n    for( const item of a_items ){\n        let model = item ? _byId[ item[ idAttribute ] ] || _byId[ item.cid ] : null;\n\n        if( model ){\n            if( merge && item !== model ){\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, a_options );\n                transaction && nested.push( transaction );\n\n                if( model.hasChanged( idAttribute ) ){\n                    updateIndex( _byId, model );\n                }\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, a_options );\n            models.push( model );\n            addIndex( _byId, model );\n        }\n    }\n\n    return models.slice( prevLength );\n}\n","import { Transaction, transactionApi } from '../transactions'\nimport { CollectionTransaction, logAggregationError, IdIndex, convertAndAquire, free, sortElements, CollectionOptions, addIndex, CollectionCore, Elements, freeAll } from './commons'\nimport { Record } from '../record'\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\n/** @private */\nconst silentOptions = { silent : true };\n\n/** @private */\nexport function emptySetTransaction( collection : CollectionCore, items : Elements, options : CollectionOptions, silent? : boolean ){\n    const isRoot = begin( collection );\n\n    const added = _reallocateEmpty( collection, items, options );\n\n    if( added.length ){\n        const needSort = sortElements( collection, options );\n\n        if( markAsDirty( collection, silent ? silentOptions : options ) ){\n            // 'added' is the reference to this.models. Need to copy it.\n            return new CollectionTransaction( collection, isRoot, added.slice(), [], [], needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n/** @private */\nexport function setTransaction( collection, items, options ){\n    const isRoot = begin( collection ),\n          nested = [];\n\n    var previous = collection.models,\n        added    = _reallocate( collection, items, nested, options );\n\n    const reusedCount = collection.models.length - added.length,\n          removed = reusedCount < previous.length ? (\n                        reusedCount ? _garbageCollect( collection, previous ) :\n                                        freeAll( collection, previous )\n                    ) : [];                    \n    \n    const addedOrChanged = nested.length || added.length,\n          // As we are reallocating models array, it needs to be sorted even if there are no changes.\n          sorted = ( sortElements( collection, options ) && addedOrChanged ) || added.length || options.sorted;\n\n    if( addedOrChanged || removed.length || sorted ){\n        if( markAsDirty( collection, options ) ){ \n            return new CollectionTransaction( collection, isRoot, added, removed, nested, sorted );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    isRoot && commit( collection );\n};\n\n// Remove references to all previous elements, which are not present in collection.\n// Returns an array with removed elements.\n/** @private */\nfunction _garbageCollect( collection : CollectionCore, previous : Record[] ) : Record[]{\n    const { _byId }  = collection,\n          removed = [];\n\n    // Filter out removed models and remove them from the index...\n    for( let record of previous ){\n        if( !_byId[ record.cid ] ){\n            removed.push( record );\n            free( collection, record );\n        }\n    }\n\n    return removed;\n}\n\n// reallocate model and index\n/** @private */\nfunction _reallocate( collection : CollectionCore, source : any[], nested : Transaction[], options ){\n    var models      = Array( source.length ),\n        _byId : IdIndex = {},\n        merge       = ( options.merge == null ? true : options.merge ) && !collection._shared,\n        _prevById   = collection._byId,\n        prevModels  = collection.models, \n        idAttribute = collection.model.prototype.idAttribute,\n        toAdd       = [],\n        orderKept   = true;\n\n    // for each item in source set...\n    for( var i = 0, j = 0; i < source.length; i++ ){\n        var item  = source[ i ],\n            model : Record = null;\n\n        if( item ){\n            var id  = item[ idAttribute ],\n                cid = item.cid;\n\n            if( _byId[ id ] || _byId[ cid ] ) continue;\n\n            model = _prevById[ id ] || _prevById[ cid ];\n        }\n\n        if( model ){\n            if( merge && item !== model ){\n                if( orderKept && prevModels[ j ] !== model ) orderKept = false;\n\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, options );\n                transaction && nested.push( transaction );\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, options );\n            toAdd.push( model );\n        }\n\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    collection.models   = models;\n    collection._byId    = _byId;\n\n    if( !orderKept ) options.sorted = true;\n\n    return toAdd;\n}\n\n/** @private */\nfunction _reallocateEmpty( self, source, options ){\n    var len         = source ? source.length : 0,\n        models      = Array( len ),\n        _byId : IdIndex = {},\n        idAttribute = self.model.prototype.idAttribute;\n\n    for( var i = 0, j = 0; i < len; i++ ){\n        var src = source[ i ];\n\n        if( src && ( _byId[ src[ idAttribute ] ] || _byId[ src.cid ] ) ){\n            continue;\n        }\n\n        var model = convertAndAquire( self, src, options );\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    self._byId    = _byId;\n\n    return self.models = models;\n}","/*************\n * Remove items from collections.\n * \n * Cannot be a part of two-phase transaction on object tree.\n * Can be executed in the scope of ad-hoc transaction or from the trigger, though.\n *\n * Implemented with low-level API. \n * Most frequent operation - single element remove. Thus, it have the fast-path.\n */\n\nimport { Record } from '../record'\nimport { free, CollectionCore, CollectionTransaction, removeIndex } from './commons'\nimport { eventsApi } from '../object-plus'\nimport { TransactionOptions, transactionApi } from '../transactions' \n\nconst { trigger2, trigger3 } = eventsApi,\n    { markAsDirty, begin, commit } = transactionApi;\n\n/** @private */\nexport function removeOne( collection : CollectionCore, el : Record | {} | string, options : TransactionOptions ) : Record {\n    var model : Record = collection.get( el );\n\n    if( model ){\n        const isRoot = begin( collection ),\n              models = collection.models;\n\n        // Remove model form the collection. \n        models.splice( models.indexOf( model ), 1 );\n        removeIndex( collection._byId, model );\n        \n        // Mark transaction as dirty. \n        const notify = markAsDirty( collection, options );\n\n        // Send out events.\n        if( notify ){\n            trigger3( model, 'remove', model, collection, options );\n            trigger3( collection, 'remove', model, collection, options );\n        } \n\n        free( collection, model, options.unset );\n\n        notify && trigger2( collection, 'update', collection, options );\n\n        // Commit transaction.\n        isRoot && commit( collection );\n\n        return model;\n    }\n};\n\n/** Optimized for removing many elements\n * 1. Remove elements from the index, checking for duplicates\n * 2. Create new models array matching index\n * 3. Send notifications and remove references\n */\n\n/** @private */\nexport function removeMany( collection : CollectionCore, toRemove : any[], options ){\n    const removed = _removeFromIndex( collection, toRemove, options.unset );\n    if( removed.length ){\n        const isRoot = begin( collection );\n\n        _reallocate( collection, removed.length );\n\n        if( markAsDirty( collection, options ) ){\n            const transaction = new CollectionTransaction( collection, isRoot, [], removed, [], false );\n            transaction.commit();\n        }\n        else{\n            // Commit transaction.\n            isRoot && commit( collection );\n        }\n    }\n\n    return removed;\n};\n\n// remove models from the index...\n/** @private */\nfunction _removeFromIndex( collection, toRemove, unset : boolean ){\n    var removed = Array( toRemove.length ),\n        _byId   = collection._byId;\n\n    for( var i = 0, j = 0; i < toRemove.length; i++ ){\n        var model = collection.get( toRemove[ i ] );\n        if( model ){\n            removed[ j++ ] = model;\n            removeIndex( _byId, model );\n            free( collection, model, unset );\n        }\n    }\n\n    removed.length = j;\n\n    return removed;\n}\n\n// Allocate new models array removing models not present in the index.\n/** @private */\nfunction _reallocate( collection, removed ){\n    var prev   = collection.models,\n        models = collection.models = Array( prev.length - removed ),\n        _byId = collection._byId;\n\n    for( var i = 0, j = 0; i < prev.length; i++ ){\n        var model = prev[ i ];\n\n        if( _byId[ model.cid ] ){\n            models[ j++ ] = model;\n        }\n    }\n\n    models.length = j;\n}","import { define, tools, eventsApi, EventMap, definitions, mixinRules, EventsDefinition, Mixable } from '../object-plus'\nimport { ItemsBehavior, transactionApi, Transactional, CloneOptions, Transaction, TransactionOptions, TransactionalDefinition, Owner } from '../transactions'\nimport { Record, SharedType, AggregatedType, createSharedTypeSpec } from '../record'\n\nimport { IdIndex, free, sortElements, dispose, Elements, CollectionCore, addIndex, removeIndex, updateIndex, Comparator, CollectionTransaction } from './commons'\nimport { addTransaction, AddOptions } from './add'\nimport { setTransaction, emptySetTransaction } from './set'\nimport { removeOne, removeMany } from './remove'\n\nconst { trigger2, on, off } = eventsApi,\n    { begin, commit, markAsDirty } = transactionApi,\n    { omit, log, assign, defaults, assignToClassProto } = tools;\n\nlet _count = 0;\n\nexport type GenericComparator = string | ( ( x : Record ) => number ) | ( ( a : Record, b : Record ) => number ); \n\nexport interface CollectionOptions extends TransactionOptions {\n    comparator? : GenericComparator\n    model? : typeof Record\n}\n\nexport type Predicate<R> = ( val : R, key : number ) => boolean | object;\n\nexport interface CollectionDefinition extends TransactionalDefinition {\n    model? : typeof Record,\n    itemEvents? : EventsDefinition\n    _itemEvents? : EventMap\n}\n\nconst slice = Array.prototype.slice;\n\nclass CollectionRefsType extends SharedType {\n    static defaultValue = [];\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'c',\n    model : Record,\n    _changeEventName : 'changes',\n    _aggregationError : null\n})\n@definitions({\n    comparator : mixinRules.value,\n    model : mixinRules.protoValue,\n    itemEvents : mixinRules.merge\n})\nexport class Collection< R extends Record = Record> extends Transactional implements CollectionCore {\n    _shared : number\n    _aggregationError : Record[]\n\n    static Subset : typeof Collection\n    static Refs : typeof Collection\n    static _SubsetOf : typeof Collection\n    \n    createSubset( models : ElementsArg, options ){\n        const SubsetOf = (<any>this.constructor).subsetOf( this ).options.type,\n            subset   = new SubsetOf( models, options );\n            \n        subset.resolve( this );\n        return subset;\n    }\n\n    static onExtend( BaseClass : typeof Transactional ){\n        // Cached subset collection must not be inherited.\n        const Ctor = this;\n        this._SubsetOf = null;\n\n        function RefsCollection( a, b, listen? ){\n            Ctor.call( this, a, b, ItemsBehavior.share | ( listen ? ItemsBehavior.listen : 0 ) );\n        }\n\n        Mixable.mixins.populate( RefsCollection );\n        \n        RefsCollection.prototype = this.prototype;\n        RefsCollection._attribute = CollectionRefsType;\n\n        this.Refs = this.Subset = <any>RefsCollection;\n\n        Transactional.onExtend.call( this, BaseClass );\n        createSharedTypeSpec( this, SharedType );\n    }\n    \n    static onDefine( definition : CollectionDefinition, BaseClass : any ){\n        if( definition.itemEvents ){\n            const eventsMap = new EventMap( BaseClass.prototype._itemEvents );\n            eventsMap.addEventsMap( definition.itemEvents );\n            this.prototype._itemEvents = eventsMap;\n        }\n\n        if( definition.comparator ) this.prototype.comparator = definition.comparator;\n\n        Transactional.onDefine.call( this, definition );\n    }\n\n    static subsetOf : ( collectionReference : any ) => any;\n    \n    _itemEvents : EventMap\n\n    /***********************************\n     * Core Members\n     */\n    // Array of the records\n    models : R[]\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.models; }\n\n    // Index by id and cid\n    _byId : { [ id : string ] : R }\n\n    set comparator( x : GenericComparator ){\n        let compare;\n\n        switch( typeof x ){\n            case 'string' :\n                this._comparator = ( a, b ) => {\n                    const aa = a[ <string>x ], bb = b[ <string>x ];\n                    if( aa === bb ) return 0;\n                    return aa < bb ? -1 : + 1;\n                } \n                break;\n            case 'function' :\n                if( x.length === 1 ){\n                    this._comparator = ( a, b ) => {\n                        const aa = (<any>x).call( this, a ), bb = (<any>x).call( this, b );\n                        if( aa === bb ) return 0;\n                        return aa < bb ? -1 : + 1;\n                    }\n                }\n                else{\n                    this._comparator = ( a, b ) => (<any>x).call( this, a, b );\n                }\n                break;\n                \n            default :\n                this._comparator = null;\n        }\n    }\n    \n    // TODO: Improve typing\n    getStore() : Transactional {\n        return this._store || ( this._store = this._owner ? this._owner.getStore() : this._defaultStore );\n    }\n\n    _store : Transactional\n\n    get comparator(){ return this._comparator; }\n    _comparator : ( a : R, b : R ) => number\n\n    _onChildrenChange( record : R, options : TransactionOptions = {}, initiator? : Transactional ){\n        // Ignore updates from nested transactions.\n        if( initiator === this ) return;\n\n        const { idAttribute } = this;\n\n        if( record.hasChanged( idAttribute ) ){\n            updateIndex( this._byId, record );\n        }\n\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            // Forward change event from the record.\n            trigger2( this, 'change', record, options )\n        }\n\n        isRoot && commit( this );\n    }\n\n    get( objOrId : string | R | Object ) : R {\n        if( objOrId == null ) return;\n\n        if( typeof objOrId === 'object' ){\n            const id = objOrId[ this.idAttribute ];\n            return ( id !== void 0 && this._byId[ id ] ) || this._byId[ (<Record>objOrId).cid ];\n        }\n        else{\n            return this._byId[ objOrId ];\n        }        \n    }\n\n    each( iteratee : ( val : R, key : number ) => void, context? : any ){\n        const fun = bindContext( iteratee, context ),\n            { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            fun( models[ i ], i ); \n        }\n    }\n\n    every( iteratee : Predicate<R>, context? : any ) : boolean {\n        const fun = toPredicateFunction( iteratee, context ),\n            { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            if( !fun( models[ i ], i ) ) return false;\n        }\n\n        return true;\n    }\n\n    filter( iteratee : Predicate<R>, context? : any ) : R[] {\n        const fun = toPredicateFunction( iteratee, context ),\n            { models } = this;\n\n        return this.map( ( x, i ) => fun( x, i ) ? x : void 0 );\n    }\n\n    find( iteratee : Predicate<R>, context? : any ) : R {\n        const fun = toPredicateFunction( iteratee, context ),\n        { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            if( fun( models[ i ], i ) ) return models[ i ];\n        }\n\n        return null;\n    }\n\n    some( iteratee : Predicate<R>, context? : any ) : boolean {\n        return Boolean( this.find( iteratee, context ) );\n    }\n\n    map< T >( iteratee : ( val : R, key : number ) => T, context? : any ) : T[]{\n        const fun = bindContext( iteratee, context ),\n            { models } = this,\n            mapped = Array( models.length );\n\n        let j = 0;\n\n        for( let i = 0; i < models.length; i++ ){\n            const x = fun( models[ i ], i );\n            x === void 0 || ( mapped[ j++ ] = x ); \n        }\n\n        mapped.length = j;\n\n        return mapped;\n    }\n\n    _validateNested( errors : {} ) : number {\n        // Don't validate if not aggregated.\n        if( this._shared ) return 0;\n\n        let count = 0;\n\n        this.each( record => {\n            const error = record.validationError;\n            if( error ){\n                errors[ record.cid ] = error;\n                count++;\n            }\n        });\n\n        return count;\n    }\n\n    model : typeof Record\n\n    // idAttribute extracted from the model type.\n    idAttribute : string\n\n    constructor( records? : ( Record | {} )[], options : CollectionOptions = {}, shared? : number ){\n        super( _count++ );\n        this.models = [];\n        this._byId = {};\n        \n        this.comparator  = this.comparator;\n\n        if( options.comparator !== void 0 ){\n            this.comparator = options.comparator;\n            options.comparator = void 0;\n        }\n        \n        this.model       = this.model;\n        \n        if( options.model ){\n            this.model = options.model;\n            options.model = void 0;\n        }\n\n        this.idAttribute = this.model.prototype.idAttribute; //TODO: Remove?\n\n        this._shared = shared || 0;\n\n        if( records ){\n            const elements = toElements( this, records, options );\n            emptySetTransaction( this, elements, options, true );\n        }\n\n        this.initialize.apply( this, arguments );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    initialize(){}\n\n    get length() : number { return this.models.length; }\n    first() : R { return this.models[ 0 ]; }\n    last() : R { return this.models[ this.models.length - 1 ]; }\n    at( a_index : number ) : R {\n        const index = a_index < 0 ? a_index + this.models.length : a_index;    \n        return this.models[ index ];\n    }\n\n    // Deeply clone collection, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const models = this._shared & ItemsBehavior.share ? this.models : this.map( model => model.clone() ),\n              copy : this = new (<any>this.constructor)( models, { model : this.model, comparator : this.comparator }, this._shared );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n        \n        return copy;\n    }\n\n    toJSON() : Object[] {\n        return this.models.map( model => model.toJSON() );\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( elements : ElementsArg = [], options : TransactionOptions = {} ) : this {\n        if( (<any>options).add !== void 0 ){\n            this._log( 'warn', \"Collection.set doesn't support 'add' option, behaving as if options.add === true.\", options );\n        }\n\n        // Handle reset option here - no way it will be populated from the top as nested transaction.\n        if( options.reset ){\n            this.reset( elements, options )\n        }\n        else{\n            const transaction = this._createTransaction( elements, options );\n            transaction && transaction.commit();\n        } \n\n        return this;    \n    }\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        const aggregated = !this._shared;\n\n        for( let record of this.models ){\n            free( this, record );\n\n            if( aggregated ) record.dispose();\n        }\n\n        super.dispose();\n    }\n\n    reset( a_elements? : ElementsArg, options : TransactionOptions = {} ) : R[] {\n        const isRoot = begin( this ),\n              previousModels = dispose( this );\n\n        // Make all changes required, but be silent.\n        if( a_elements ){            \n            emptySetTransaction( this, toElements( this, a_elements, options ), options, true );\n        }\n\n        markAsDirty( this, options );\n\n        options.silent || trigger2( this, 'reset', this, defaults( { previousModels : previousModels }, options ) );\n\n        isRoot && commit( this );\n        return this.models;\n    }\n\n    // Add elements to collection.\n    add( a_elements : ElementsArg , options : AddOptions = {} ){\n        const elements = toElements( this, a_elements, options ),\n              transaction = this.models.length ?\n                    addTransaction( this, elements, options ) :\n                    emptySetTransaction( this, elements, options );\n\n        if( transaction ){\n            transaction.commit();\n            return transaction.added;\n        }\n    }\n\n    // Remove elements. \n    remove( recordsOrIds : any, options : CollectionOptions = {} ) : R[] | R {\n        if( recordsOrIds ){\n            return Array.isArray( recordsOrIds ) ?\n                        removeMany( this, recordsOrIds, options ) as R[]:\n                        removeOne( this, recordsOrIds, options ) as R;\n        }\n\n        return [];\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.   \n    _createTransaction( a_elements : ElementsArg, options : TransactionOptions = {} ) : CollectionTransaction | void {\n        const elements = toElements( this, a_elements, options );\n\n        if( this.models.length ){\n            return options.remove === false ?\n                        addTransaction( this, elements, options, true ) :\n                        setTransaction( this, elements, options );\n        }\n        else{\n            return emptySetTransaction( this, elements, options );\n        }\n    }\n\n    static _attribute = AggregatedType;\n\n    /***********************************\n     * Collection manipulation methods\n     */\n\n    pluck( key : keyof R ) : any[] {\n        return this.models.map( model => model[ key ] );\n    }\n\n    sort( options : TransactionOptions = {} ) : this {\n        if( sortElements( this, options ) ){\n            const isRoot = begin( this );\n            \n            if( markAsDirty( this, options ) ){\n                trigger2( this, 'sort', this, options );\n            }\n\n            isRoot && commit( this );\n        }\n\n        return this;\n    }\n\n    // Add a model to the end of the collection.\n    push(model : ElementsArg, options : CollectionOptions ) {\n      return this.add(model, assign({at: this.length}, options));\n    }\n\n    // Remove a model from the end of the collection.\n    pop( options : CollectionOptions ) : R {\n      var model = this.at(this.length - 1);\n      this.remove(model, { unset : true, ...options });\n      return model;\n    }\n\n    // Remove and return given model.\n    // TODO: do not dispose the model for aggregated collection.\n    unset( modelOrId : R | string, options? ) : R {\n        const value = this.get( modelOrId );\n        this.remove( modelOrId, { unset : true, ...options } );\n        return value;\n    }\n\n    // Add a model to the beginning of the collection.\n    unshift(model : ElementsArg, options : CollectionOptions ) {\n      return this.add(model, assign({at: 0}, options));\n    }\n\n    // Remove a model from the beginning of the collection.\n    shift( options? : CollectionOptions ) : R {\n      var model = this.at(0);\n      this.remove( model, { unset : true, ...options } );\n      return model;\n    }\n\n    // Slice out a sub-array of models from the collection.\n    slice() : R[] {\n      return slice.apply(this.models, arguments);\n    }\n\n    indexOf( modelOrId : any ) : number {\n        const record = this.get( modelOrId );\n        return this.models.indexOf( record );\n    }\n\n    modelId( attrs : {} ) : any {\n        return attrs[ this.model.prototype.idAttribute ];\n    }\n\n    // Toggle model in collection.\n    toggle( model : R, a_next? : boolean ) : boolean {\n        var prev = Boolean( this.get( model ) ),\n            next = a_next === void 0 ? !prev : Boolean( a_next );\n\n        if( prev !== next ){\n            if( prev ){\n                this.remove( model );\n            }\n            else{\n                this.add( model );\n            }\n        }\n\n        return next;\n    }\n\n    _log( level : tools.LogLevel, text : string, value ) : void {\n        tools.log( level, `[Collection Update] ${ this.model.prototype.getClassName() }.${ this.getClassName() }: ` + text, {\n            Argument : value,\n            'Attributes spec' : this.model.prototype._attributes\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Collection';\n    }\n}\n\nexport type ElementsArg = Object | Record | Object[] | Record[];\n\n// TODO: make is safe for parse to return null (?)\nfunction toElements( collection : Collection, elements : ElementsArg, options : CollectionOptions ) : Elements {\n    const parsed = options.parse ? collection.parse( elements, options ) : elements; \n    return Array.isArray( parsed ) ? parsed : [ parsed ];\n}\n\ncreateSharedTypeSpec( Collection, SharedType );\n\nRecord.Collection = <any>Collection;\n\nfunction bindContext( fun : Function, context? : any ){\n    return context !== void 0 ? ( v, k ) => fun.call( context, v, k ) : fun;\n}\n\nfunction toPredicateFunction<R>( iteratee : Predicate<R>, context : any ){\n    if( typeof iteratee === 'object' ){\n        // Wrap object to the predicate...\n        return x => {\n            for( let key in iteratee as any ){\n                if( iteratee[ key ] !== x[ key ] )\n                    return false;\n            }\n\n            return true;\n        }\n    }\n    \n    return bindContext( iteratee, context );\n\n}","import { Collection } from '../collection'\nimport { Record } from '../record'\nimport { CompiledReference } from '../traversable'\n\nexport type CollectionReference = ( () => Collection ) | Collection | string; \n\n/** @private */\nexport function parseReference( collectionRef : CollectionReference ) : ( root : Record ) => Collection {\n    switch( typeof collectionRef ){\n        case 'function' :\n            return root => (<any>collectionRef).call( root );\n        case 'object'   :\n            return () => <Collection>collectionRef;\n        case 'string'   :\n            const { resolve } = new CompiledReference( <string>collectionRef );\n            return resolve;\n    }\n}","import { Collection, CollectionOptions } from '../collection'\nimport { tools, eventsApi, define } from '../object-plus'\nimport { Record, AggregatedType } from '../record'\nimport { parseReference, CollectionReference } from './commons'\nimport { ChainableAttributeSpec } from '../record'\nimport { Transactional, ItemsBehavior, TransactionOptions, transactionApi } from '../transactions'\n\nconst { fastDefaults } = tools;\n\ntype RecordsIds = ( string | number )[];\n\nCollection.subsetOf = function subsetOf( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const SubsetOf = this._SubsetOf || ( this._SubsetOf = defineSubsetCollection( this ) ),\n        getMasterCollection = parseReference( masterCollection ),\n        typeSpec = new ChainableAttributeSpec({\n            type : SubsetOf\n        });\n\n    return typeSpec.get(\n        function( refs ){\n            !refs || refs.resolvedWith || refs.resolve( getMasterCollection( this ) );\n            return refs;\n        }\n    );\n};\n\nconst subsetOfBehavior = ItemsBehavior.share | ItemsBehavior.persistent;\n\nfunction defineSubsetCollection( CollectionConstructor : typeof Collection ) {\n    @define class SubsetOfCollection extends CollectionConstructor {\n        refs : any[];\n        resolvedWith : Collection = null;\n\n        _attribute : AggregatedType\n\n        get __inner_state__(){ return this.refs || this.models; }\n\n        constructor( recordsOrIds?, options? ){\n            super( [], options, subsetOfBehavior );\n            this.refs = toArray( recordsOrIds );\n        }\n\n        // Remove should work fine as it already accepts ids. Add won't...\n        add( a_elements, options? ){\n            const { resolvedWith } = this,\n                    toAdd = toArray( a_elements );\n            \n            if( resolvedWith ){\n                // If the collection is resolved already, everything is simple.\n                return super.add( resolveRefs( resolvedWith, toAdd ), options );\n            }\n            else{\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                if( toAdd.length ){\n                    const isRoot = transactionApi.begin( this );\n\n                    // Save elements to resolve in future...\n                    this.refs = this.refs ? this.refs.concat( toAdd ) : toAdd.slice();\n\n                    transactionApi.markAsDirty( this, options );\n\n                    // And throw the 'changes' event.\n                    isRoot && transactionApi.commit( this );\n                }\n            }\n        }\n\n        reset( a_elements?, options? ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super.reset( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options ) || [];\n        }\n\n        _createTransaction( a_elements, options? ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super._createTransaction( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options );\n        }\n\n        // Serialized as an array of model ids.\n        toJSON() : RecordsIds {\n            return this.refs ?\n                this.refs.map( objOrId => objOrId.id || objOrId ) :\n                this.models.map( model => model.id );\n        }\n\n        // Subset is always valid.\n        _validateNested(){ return 0; }\n\n        // Must be shallow copied on clone.\n        clone( owner? ){\n            var Ctor = (<any>this).constructor,\n                copy = new Ctor( [], {\n                    model : this.model,\n                    comparator : this.comparator\n                });\n\n            if( this.resolvedWith ){\n                copy.resolvedWith = this.resolvedWith;\n                copy.reset( this.models, { silent : true } );\n            }\n            else{\n                copy.refs = this.refs.slice();\n            }\n\n            return copy;\n        }\n\n        // Clean up the custom parse method possibly defined in the base class.\n        parse( raw : any ) : Record[] {\n            return raw;\n        }\n\n        resolve( collection : Collection ) : this {\n            if( collection && collection.length ){\n                this.resolvedWith = collection;\n\n                if( this.refs ){\n                    this.reset( this.refs, { silent : true } );\n                    this.refs = null;\n                }\n            }\n\n            return this;\n        }\n\n        getModelIds() : RecordsIds { return this.toJSON(); }\n\n        toggle( modelOrId : any, val : boolean ) : boolean {\n            return super.toggle( this.resolvedWith.get( modelOrId ), val );\n        }\n\n        addAll() : Record[] {\n            if( this.resolvedWith ){\n                this.set( this.resolvedWith.models );\n                return this.models;\n            }\n\n            throw new Error( \"Cannot add elemens because the subset collection is not resolved yet.\" );\n        }\n\n        toggleAll() : Record[] {\n            return this.length ? this.reset() : this.addAll();\n        }\n    }\n\n    // Clean up all custom item events to prevent memory leaks.\n    SubsetOfCollection.prototype._itemEvents = void 0;\n\n    return SubsetOfCollection;\n}\n\nfunction resolveRefs( master, elements ){\n    const records = [];\n    \n    for( let el of elements ){\n        const record = master.get( el );\n        if( record ) records.push( record );\n    }\n\n    return records;\n}\n\nfunction delaySet( collection, elements, options ) : void {\n    if( tools.notEqual( collection.refs, elements ) ){\n        const isRoot = transactionApi.begin( collection );\n\n        // Save elements to resolve in future...\n        collection.refs = elements.slice();\n\n        transactionApi.markAsDirty( collection, options );\n        \n        // And throw the 'changes' event.\n        isRoot && transactionApi.commit( collection );\n    }\n}\n\nfunction toArray( elements ){\n    return elements ? ( \n        Array.isArray( elements ) ? elements : [ elements ]\n    ) : [];\n}","// (c) 2016 Vlad Balin and Volicon\n// MixtureJS may be freely distributed under the MIT license. \n\nimport * as tools from './tools'\nexport { tools }\nexport * from './mixins'\nexport * from './events'\nimport * as eventsApi from './eventsource'\nexport { eventsApi }\n\nimport { Mixable, MixableConstructor } from './mixins'\n\ndeclare global {\n    interface ObjectConstructor {\n        /** Polyfill for Object.assign */\n        assign< T >( dest : T, ...sources : Object[] ) : T\n\n        /** Global logging interface, for console debugging. */\n        log : tools.Log\n\n        /** ES5 Object.extend */\n        extend( protoProps : {}, staticProps : {} ) : MixableConstructor\n    }\n}\n\nObject.extend = ( protoProps, staticProps ) => Mixable.extend( protoProps, staticProps );\nObject.assign || ( Object.assign = tools.assign );\nObject.log = tools.log;","export interface ChildrenErrors {\n    [ key : string ] : ValidationError | any\n} \n\nexport interface Validatable {\n    _validateNested( errors : ChildrenErrors ) : number;\n    validate( self : any ) : any\n    get( key : string ) : any\n}\n\n// Validation error object.\nexport class ValidationError {\n    // Invalid nested object keys \n    nested : ChildrenErrors \n    length : number\n\n    // Local error\n    error : any\n\n    constructor( obj : Validatable ){\n        this.length = obj._validateNested( this.nested = {} );\n\n        if( this.error = obj.validate( obj ) ){\n            this.length++;\n        }\n    }\n\n    each( iteratee : ( value : any, key : string ) => void ) : void {\n        const { error, nested } = this;\n\n        if( error ) iteratee( error, null );\n\n        for( const key in nested ){\n            iteratee( nested[ key ], key );\n        }\n    }\n\n    eachError( iteratee : ( error : any, key : string, object : Validatable ) => void, object : Validatable ) : void {\n        this.each( ( value : any, key : string ) => {\n            if( value instanceof ValidationError ){\n                (<ValidationError>value).eachError( iteratee, object.get( key ) );\n            }\n            else{\n                iteratee( value, key, object );\n            }\n        });\n    }\n}","import { Messenger, CallbacksByEvents, MessengersByCid, MixinsState, MixinMergeRules, MessengerDefinition, tools, mixins, eventsApi, define, Subclass } from './object-plus'\nimport { ValidationError, Validatable, ChildrenErrors } from './validation'\nimport { Traversable, resolveReference } from './traversable'\n\nconst { assign } = tools,\n      { trigger2, trigger3, on, off } = eventsApi;\n/***\n * Abstract class implementing ownership tree, tho-phase transactions, and validation. \n * 1. createTransaction() - apply changes to an object tree, and if there are some events to send, transaction object is created.\n * 2. transaction.commit() - send and process all change events, and close transaction.\n */\n\n/** @private */\nexport type TransactionalDefinition = MessengerDefinition\n\nexport enum ItemsBehavior {\n    share       = 0b0001,\n    listen      = 0b0010,\n    persistent  = 0b0100\n}\n\n// Transactional object interface\n@define\n@mixins( Messenger )\nexport abstract class Transactional implements Messenger, Validatable, Traversable {\n    // Mixins are hard in TypeScript. We need to copy type signatures over...\n    // Here goes 'Mixable' mixin.\n    static __super__ : object;\n    static mixins : MixinsState;\n    static define : ( definition? : TransactionalDefinition, statics? : object ) => typeof Transactional;\n    static extend : <T extends TransactionalDefinition>( definition? : T, statics? : object ) => Subclass<T>;\n\n    static onDefine : ( definition : TransactionalDefinition, BaseClass : typeof Transactional ) => void;\n\n    static onExtend( BaseClass : typeof Transactional ) : void {\n        // Make sure we don't inherit class factories.\n        if( BaseClass.create === this.create ) {\n            this.create = Transactional.create;\n        }\n    }\n\n    // Define extendable mixin static properties.\n    static create( a : any, b? : any ) : Transactional {\n        return new (this as any)( a, b );\n    }\n\n    /** Generic class factory. May be overridden for abstract classes. Not inherited. */\n    on : ( events : string | CallbacksByEvents, callback, context? ) => this\n    once : ( events : string | CallbacksByEvents, callback, context? ) => this\n    off : ( events? : string | CallbacksByEvents, callback?, context? ) => this\n    trigger      : (name : string, a?, b?, c?, d?, e? ) => this\n\n    stopListening : ( source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) => this\n    listenTo : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    listenToOnce : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    \n    _disposed : boolean;\n\n    // State accessor. \n    readonly __inner_state__ : any;\n\n    // Shared modifier (used by collections of shared models)\n    _shared? : number; \n    \n    dispose() : void {\n        if( this._disposed ) return;\n        \n        this._owner = void 0;\n        this._ownerKey = void 0;\n        this.off();\n        this.stopListening();\n        this._disposed = true;\n    }\n\n    // Must be called at the end of the constructor in the subclass.\n    initialize() : void {}\n\n    /** @private */\n    _events : eventsApi.HandlersByEvent = void 0;\n\n    /** @private */\n    _listeningTo : MessengersByCid\n\n    /** @private */\n    _localEvents : eventsApi.EventMap\n\n    cid : string\n    cidPrefix : string\n\n    static shared : any;\n\n    // Unique version token replaced on change\n    /** @private */\n    _changeToken : {} = {}\n\n    // true while inside of the transaction\n    /** @private */\n    _transaction : boolean = false;\n\n    // Holds current transaction's options, when in the middle of transaction and there're changes but is an unsent change event\n    /** @private */\n    _isDirty  : TransactionOptions = null;\n\n    // Backreference set by owner (Record, Collection, or other object)\n    /** @private */\n    _owner : Owner = void 0;\n\n    // Key supplied by owner. Used by record to identify attribute key.\n    // Only collections doesn't set the key, which is used to distinguish collections.\n    /** @private */  \n    _ownerKey : string = void 0;\n\n    // Name of the change event\n    /** @private */\n    _changeEventName : string\n\n    /**\n     * Subsribe for the changes.\n     */\n    onChanges( handler : Function, target? : Messenger ){\n        on( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Unsubscribe from changes.\n     */\n    offChanges( handler? : Function, target? : Messenger ){\n        off( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Listen to changes event. \n     */\n    listenToChanges( target : Transactional, handler ){\n        this.listenTo( target, target._changeEventName, handler );\n    }\n\n    constructor( cid : string | number ){\n        this.cid = this.cidPrefix + cid;\n    }\n\n    // Deeply clone ownership subtree\n    abstract clone( options? : CloneOptions ) : this\n    \n    // Execute given function in the scope of ad-hoc transaction.\n    transaction( fun : ( self : this ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = transactionApi.begin( this );\n        const update = fun.call( this, this );\n        update && this.set( update );\n        isRoot && transactionApi.commit( this );\n    }\n\n    // Loop through the members in the scope of transaction.\n    // Transactional version of each()\n    updateEach( iteratee : ( val : any, key : string | number ) => void, options? : TransactionOptions ){\n        const isRoot = transactionApi.begin( this );\n        this.each( iteratee );\n        isRoot && transactionApi.commit( this );\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( values : any, options? : TransactionOptions ) : this {\n        if( values ){ \n            const transaction = this._createTransaction( values, options );\n            transaction && transaction.commit();\n        } \n\n        return this;\n    }\n\n    // Assign transactional object \"by value\", copying aggregated items.\n    assignFrom( source : Transactional | Object ) : this {\n        return this.set( ( <any>source ).__inner_state__ || source, { merge : true } );\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.\n    // Returns null if there are no any changes.\n    /** @private */  \n    abstract _createTransaction( values : any, options? : TransactionOptions ) : Transaction | void\n    \n    // Parse function applied when 'parse' option is set for transaction.\n    parse( data : any, options? : TransactionOptions ) : any { return data }\n\n    // Convert object to the serializable JSON structure\n    abstract toJSON() : {}\n\n    /*******************\n     * Traversals and member access\n     */\n    \n    // Get object member by its key.\n    abstract get( key : string ) : any\n\n    // Get object member by symbolic reference.\n    deepGet( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.get ? object.get( key ) : object[ key ] );\n    }\n\n    //_isCollection : boolean\n\n    // Return owner skipping collections.\n    getOwner() : Owner {\n        return this._owner;\n    }\n\n    // Store used when owner chain store lookup failed. Static value in the prototype. \n    /** @private */\n    _defaultStore : Transactional\n\n    // Locate the closest store. Store object stops traversal by overriding this method. \n    getStore() : Transactional {\n        const { _owner } = this;\n        return _owner ? <Transactional> _owner.getStore() : this._defaultStore;\n    }\n\n\n    /***************************************************\n     * Iteration API\n     */\n\n    // Loop through the members. Must be efficiently implemented in container class.\n    abstract each( iteratee : ( val : any, key : string | number ) => void, context? : any )\n\n    // Map members to an array\n    map<T>( iteratee : ( val : any, key : string | number ) => T, context? : any ) : T[]{\n        const arr : T[] = [],\n              fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee;\n        \n        this.each( ( val, key ) => {\n            const result = fun( val, key );\n            if( result !== void 0 ) arr.push( result );\n        } );\n\n        return arr;\n    }\n\n    // Map members to an object\n    mapObject<T>( iteratee : ( val : any, key : string | number ) => T, context? : any ) : { [ key : string ] : T }{\n        const obj : { [ key : string ] : T } = {},\n            fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee;\n        \n        this.each( ( val, key ) => {\n            const result = iteratee( val, key );\n            if( result !== void 0 ) obj[ key ] = result;\n        } );\n\n        return obj;\n    }\n    \n    /*********************************\n     * Validation API\n     */\n\n    // Lazily evaluated validation error\n    /** @private */\n    _validationError : ValidationError = void 0\n\n    // Validate ownership tree and return valudation error \n    get validationError() : ValidationError {\n        const error = this._validationError || ( this._validationError = new ValidationError( this ) );\n        return error.length ? error : null; \n    }\n\n    // Validate nested members. Returns errors count.\n    /** @private */\n    abstract _validateNested( errors : ChildrenErrors ) : number\n\n    // Object-level validator. Returns validation error.\n    validate( obj? : Transactional ) : any {}\n\n    // Return validation error (or undefined) for nested object with the given key. \n    getValidationError( key : string ) : any {\n        var error = this.validationError;\n        return ( key ? error && error.nested[ key ] : error ) || null;\n    }\n\n    // Get validation error for the given symbolic reference.\n    deepValidationError( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.getValidationError( key ) );\n    }\n\n    // Iterate through all validation errors across the ownership tree.\n    eachValidationError( iteratee : ( error : any, key : string, object : Transactional ) => void ) : void {\n        const { validationError } = this;\n        validationError && validationError.eachError( iteratee, this );\n    }\n\n    // Check whenever member with a given key is valid. \n    isValid( key : string ) : boolean {\n        return !this.getValidationError( key );\n    }\n\n    valueOf() : Object { return this.cid; }\n    toString(){ return this.cid; }\n\n    // Get class name for an object instance. Works fine with ES6 classes definitions (not in IE).\n    getClassName() : string {\n        const { name } = <any>this.constructor;\n        if( name !== 'Subclass' ) return name;\n    }\n\n    // Logging interface for run time errors and warnings.\n    abstract _log( level : string, text : string, value : any ) : void;\n}\n\nexport interface CloneOptions {\n    // 'Pin store' shall assign this._defaultStore = this.getStore();\n    pinStore? : boolean\n}\n\n// Owner must accept children update events. It's an only way children communicates with an owner.\n/** @private */\nexport interface Owner extends Traversable, Messenger {\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void;\n    getOwner() : Owner\n    getStore() : Transactional\n}\n\n// Transaction object used for two-phase commit protocol.\n// Must be implemented by subclasses.\n// Transaction must be created if there are actual changes and when markIsDirty returns true.\n/** @private */ \nexport interface Transaction {\n    // Object transaction is being made on.\n    object : Transactional\n\n    // Send out change events, process update triggers, and close transaction.\n    // Nested transactions must be marked with isNested flag (it suppress owner notification).\n    commit( initiator? : Transactional )\n}\n\n// Options for distributed transaction  \nexport interface TransactionOptions {\n    // Invoke parsing \n    parse? : boolean\n\n    // Suppress change notifications and update triggers\n    silent? : boolean\n\n    // Update existing transactional members in place, or skip the update (ignored by models)\n    merge? : boolean // =true\n\n    // Should collections remove elements in set (ignored by models)  \n    remove? : boolean // =true\n\n    // Always replace enclosed objects with new instances\n    reset? : boolean // = false\n\n    // Do not dispose aggregated members\n    unset? : boolean\n\n    validate? : boolean\n}\n\n/**\n * Low-level transactions API. Must be used like this:\n * const isRoot = begin( record );\n * ...\n * isRoot && commit( record, options );\n * \n * When committing nested transaction, the flag must be set to true. \n * commit( object, options, isNested ) \n */\n\nexport const transactionApi = {\n    // Start transaction. Return true if it's the root one.\n    /** @private */\n    begin( object : Transactional ) : boolean {\n        return object._transaction ? false : ( object._transaction = true );  \n    },\n\n    // Mark object having changes inside of the current transaction.\n    // Returns true whenever there notifications are required.\n    /** @private */\n    markAsDirty( object : Transactional, options : TransactionOptions ) : boolean {\n        // If silent option is in effect, don't set isDirty flag.\n        const dirty = !options.silent;\n        if( dirty ) object._isDirty = options;\n        \n        // Reset version token.\n        object._changeToken = {};\n\n        // Object is changed, so validation must happen again. Clear the cache.\n        object._validationError = void 0;\n\n        return dirty;\n    },\n\n    // Commit transaction. Send out change event and notify owner. Returns true if there were changes.\n    // Must be executed for the root transaction only.\n    /** @private */\n    commit( object : Transactional, initiator? : Transactional ){\n        let originalOptions = object._isDirty;\n\n        if( originalOptions ){\n            // Send the sequence of change events, handling chained handlers.\n            while( object._isDirty ){\n                const options = object._isDirty;\n                object._isDirty = null; \n                trigger3( object, object._changeEventName, object, options, initiator );\n            }\n            \n            // Mark transaction as closed.\n            object._transaction = false;\n\n            // Notify owner on changes out of transaction scope.  \n            const { _owner } = object;  \n            if( _owner && _owner !== <any> initiator ){ // If it's the nested transaction, owner is already aware there are some changes.\n                _owner._onChildrenChange( object, originalOptions );\n            }\n        }\n        else{\n            // No changes. Silently close transaction.\n            object._isDirty = null;\n            object._transaction = false;\n        }\n    },\n\n    /************************************\n     * Ownership management\n     */\n\n    // Add reference to the record.\n    /** @private */\n    aquire( owner : Owner, child : Transactional, key? : string ) : boolean {\n        if( !child._owner ){\n            child._owner = owner;\n            child._ownerKey = key;\n            return true;\n        }\n\n        return child._owner === owner;\n    },\n\n    // Remove reference to the record.\n    /** @private */\n    free( owner : Owner, child : Transactional ) : void {\n        if( owner === child._owner ){\n            child._owner = void 0;\n            child._ownerKey = void 0;\n        }\n    }\n}","import { AnyType } from './any'\nimport { Owner, transactionApi, Transactional, ItemsBehavior, TransactionOptions } from '../../transactions'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer, ConstructorOptions } from './updates'\nimport { ValidationError } from '../../validation'\n\nconst { free, aquire } = transactionApi;\n\nexport class AggregatedType extends AnyType {\n    type : typeof Transactional\n\n    clone( value : Transactional ) : Transactional {\n        return value ? value.clone() : value;\n    }\n\n    toJSON( x ){ return x && x.toJSON(); }\n\n    doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null ){\n            if( next instanceof this.type ){\n                // In case if merge option explicitly specified, force merge.\n                if( options.merge ) return next.__inner_state__;\n            }\n            else{\n                return next;\n            }\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        // Invoke class factory to handle abstract classes\n        if( next == null ) return next;\n        \n        if( next instanceof this.type ){\n            if( next._shared && !( next._shared & ItemsBehavior.persistent ) ) { // TODO: think more about shared types assignment compatibility. \n                this._log( 'error', 'aggregated collection attribute is assigned with shared collection', next, record );\n            }\n\n            // With explicit 'merge' option we need to clone an object if its previous value was 'null'.\n            // This is an only case we could be here when merge === true.\n            return options.merge ? next.clone() : next;\n        }\n\n        return <any>this.type.create( next, options );\n    }\n\n    dispose ( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    validate( record : AttributesContainer, value : Transactional ) : ValidationError {\n        var error = value && value.validationError;\n        if( error ) return error;\n    }\n\n    create() : Transactional {\n        return (<any>this.type).create(); // this the subclass of Transactional here.\n    }\n\n    initialize( options ){\n        options.changeHandlers.unshift( this._handleChange );\n    }\n\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options : TransactionOptions ){\n        if( prev ){\n            free( record, prev );\n            options.unset || prev.dispose();\n        } \n        \n        if( next && !aquire( record, next, this.name ) ){\n            this._log( 'error', 'aggregated attribute assigned with object already having an owner', next, record );\n        }\n    }\n}","import { AnyType } from './any'\nimport { AttributesContainer, ConstructorOptions } from './updates'\nimport { ItemsBehavior, Owner, transactionApi, Transactional, TransactionOptions } from '../../transactions' \nimport { tools, eventsApi } from '../../object-plus'\n\nconst { on, off } = eventsApi,\n    { free, aquire } = transactionApi;\n\n/************************\n * Shared attribute definition.\n * - Not serialized.\n * - Listening to the changes.\n * - Doesn't take ownership when assigned with object of proper type.\n * - Takes ownership on objects which are converted.\n */\n\nconst shareAndListen = ItemsBehavior.listen | ItemsBehavior.share;\n\n/** @private */\nexport class SharedType extends AnyType {\n    type : typeof Transactional\n\n     doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value, record ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clone( value : Transactional, record : AttributesContainer ) : Transactional {\n        // References are not cloned.\n        if( !value || value._owner !== record ) return value;\n\n        // Implicitly created objects are cloned.\n        const clone = value.clone();\n        aquire( record, clone, this.name );\n        return clone;\n    }\n\n    // Do not serialize by default.\n    toJSON(){}\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null && !( next instanceof this.type ) ){\n            return next;\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        if( next == null || next instanceof this.type ) return next;\n\n        // Convert type using implicitly created rtransactional object.\n        const implicitObject = new ( this.type as any )( next, options, shareAndListen );\n\n        // To prevent a leak, we need to take an ownership on it.\n        aquire( record, implicitObject, this.name );\n\n        return implicitObject;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n\n    // They are always created as null.\n    create() : Transactional {\n        return null;\n    }\n\n    // Listening to the change events\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options ){\n        if( prev ){\n            // If there was an implicitly created object, remove an ownership.\n            if( prev._owner === record ){\n                free( record, prev );\n                options.unset || prev.dispose();\n            }\n            else{\n                off( prev, prev._changeEventName, this._onChange, record );\n            }\n        }  \n \n        if( next ){\n            // No need to take an ownership for an implicit object - already done in convert or clone.\n            if( next._owner !== record ){\n                on( next, next._changeEventName, this._onChange, record );\n            }\n        } \n    }\n\n    dispose( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    _onChange : ( child : Transactional, options : TransactionOptions, initiator : Transactional ) => void \n\n    initialize( options ){\n        // Create change event handler which knows current attribute name. \n        const attribute = this;\n        this._onChange = this.propagateChanges ? function( child, options, initiator ){\n            this === initiator || this.forceAttributeChange( attribute.name, options );\n        } : ignore;\n\n        options.changeHandlers.unshift( this._handleChange );\n    }\n}\n\nfunction ignore(){}","import { AnyType, AttributeOptions } from '../record'\nimport { parseReference, CollectionReference } from './commons'\nimport { Collection } from '../collection'\nimport { Record } from '../record'\n\nimport { ChainableAttributeSpec } from '../record'\n\n/********\n * Reference to model by id.\n * \n * Untyped attribute. Holds model id, when unresolved. When resolved, is substituted\n * with a real model.\n * \n * No model changes are detected and counted as owner's change. That's intentional.\n */\n\n/** @private */\ntype RecordRefValue = Record | string;\n\n/** @private */\nclass RecordRefType extends AnyType {\n    // It is always serialized as an id, whenever it's resolved or not. \n    toJSON( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Wne \n    clone( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Model refs by id are equal when their ids are equal.\n    isChanged( a : RecordRefValue, b : RecordRefValue){\n        var aId = a && ( (<Record>a).id == null ? a : (<Record>a).id ),\n            bId = b && ( (<Record>b).id == null ? b : (<Record>b).id );\n\n        return aId !== bId;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n}\n\nRecord.from = function from( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const getMasterCollection = parseReference( masterCollection );\n\n    const typeSpec = new ChainableAttributeSpec({\n        value : null,\n        _attribute : RecordRefType\n    });\n    \n    return typeSpec\n        .get( function( objOrId : RecordRefValue, name : string ) : Record {\n            if( typeof objOrId === 'object' ) return objOrId;\n\n            // So, we're dealing with an id reference. Resolve it.\n            const collection = getMasterCollection( this );\n            let   record : Record = null;\n\n            // If master collection exists and is not empty...\n            if( collection && collection.length ){\n                // Silently update attribute with record from this collection.\n                record = collection.get( objOrId ) || null;\n                this.attributes[ name ] = record;\n\n                // Subscribe for events manually. delegateEvents won't be invoked.\n                record && this._attributes[ name ].handleChange( record, null, this, {} );\n            }\n\n            return record;\n        });\n};","import { Record } from '../record'\nimport { Transactional } from '../transactions'\n\nlet _store : Store = null;\n\nexport class Store extends Record {\n    getStore() : Store { return this; }\n \n    // delegate item lookup to owner, and to the global store if undefined\n    get( name : string ) : any {\n        // Lookup for resource in the current store. \n        let local = this[ name ];\n\n        // If something is found or it's the global store, return result.\n        if( local || this === this._defaultStore ) return local;\n\n        // Forward failed lookup to owner or global store.\n        return this._owner ? this._owner.get( name ) : this._defaultStore.get( name ); \n    }\n\n    static get global(){ return _store; }\n    static set global( store : Store ){\n        if( _store ){\n          _store.dispose();\n        }\n\n        Transactional.prototype._defaultStore = _store = store;\n    }\n}\n\nStore.global = new Store();","/**\n * Export everything \n */\nexport * from './object-plus'\nexport * from './collection'\nexport * from './relations'\nexport * from './record'\n\n// Exported module itself is the global event bus.\nimport { Events } from './object-plus/'\nexport const { on, off, trigger, once, listenTo, stopListening, listenToOnce } = <any>Events;\n\nimport { Collection } from './collection'\n\n// Define synonims for NestedTypes backward compatibility.\nimport { Record as Model } from './record' \nimport { define, Mixable as Class } from './object-plus/'\nexport { Model, Class };\n\nexport function attributes( attrDefs ) : typeof Model {\n    @define class DefaultRecord extends Model {\n        static attributes = attrDefs;\n    }\n\n    return DefaultRecord;\n}\n\nimport { ChainableAttributeSpec } from './record'\n\n/** Typeless attribute declaration with default value. */ \nexport function value( x : any ) : ChainableAttributeSpec {\n    return new ChainableAttributeSpec({ value : x });\n}\n\n/** Wrap model or collection method in transaction. */\nexport function transaction< F extends Function >( method : F ) : F {\n    return <any>function( ...args ){\n        let result;\n        \n        this.transaction( () => {\n            result = method.apply( this, args );\n        });\n        \n        return result;\n    }\n}"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","__rest","s","e","t","p","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","value","proto","getPrototypeOf","Array","every","isValidJSON","Class","obj","arr","fun","result","ArrayProto","someArray","someObject","predicate","some","x","source","dest","discard","name","other","assign","defaults","func","memo","first","apply","a","protoA","DateProto","arraysNotEqual","ObjectProto","objectsNotEqual","keysA","keys","notEqual","hash","HashProto","Constructor","BaseClass","getBaseClass","__super__","define","MixinsState","get","Mixable","populate","onExtend","ClassOrDefinition","Ctor","predefine","rules","mixins","definitionRules","hashMap","definitionKey","mergeObject","_a","_b","object","ignore","dontMix","getOwnPropertyNames","_i","name_2","sourceProp","rule","unshift","destProp","configurable","resolveRule","event","_bubblingHandlers","trigger5","trigger3","trigger2","_events","callback","context","filteredHead","prev","head","ev","next","_callback","f","EventHandler","once_1","_once","off","on","listOff","name_3","api","events","eventSplitter","test","names_1","split","self","queue","all","listSend2","listSend3","listSend4","listSend5","listSend6","_idCount","listener","_listeningTo","cid","uniqueId","root","reference","action","path","match","referenceMask","skip","getStore","getOwner","record","isRoot","begin","options","_attributes","doUpdate","markAsDirty","attributes","commit","_begin","_previousAttributes","AttributesCopy","_changedAttributes","_markAsDirty","attrDefs","attrs","Function","map","attr","join","Attributes","values","_log","prevHook","nextHook","prevTransform","nextTransform","prevHandler","nextHandler","validate","spec","attrSpec","has","ChainableAttributeSpec","type","inferType","Transactional","shared","hasCustomDefault","Number","String","Boolean","date","isNaN","Date","getTime","timestamp","struct","minutesOffset","isoDatePattern","exec","k","numericKeys","undefined","UTC","parse","Math","round","AnyType","toAttributeOptions","attrsWithParse","filter","_parse","toJSON","Attribute","_attribute","attrSpecs","_localEvents","_onChange","eventsApi.EventMap","addEvent","createWatcherFromRef","wrapWatcher","watcher","ref","local","resolve","tail","shouldBeAnObject","unknown","push","idAttribute","definition","collection","models","_byId","freeAll","model","_shared","ItemsBehavior","listen","_changeEventName","_onChildrenChange","merge","clone","_aquire","_aggregationError","_itemEvents","subscribe","owner","child","unset","_free","dispose","unsubscribe","children","children_1","free","_comparator","sort","index","id","previous","items","nested","added","appendElements","needSort","sortOrMoveElements","CollectionTransaction","logAggregationError","at","length_1","moveElements","sortElements","j","a_items","a_options","forceMerge","prevLength","a_items_1","item","transaction","_createTransaction","hasChanged","updateIndex","convertAndAquire","addIndex","slice","silent","_reallocateEmpty","silentOptions","_reallocate","reusedCount","removed","_garbageCollect","addedOrChanged","sorted","previous_1","_prevById","prevModels","toAdd","orderKept","len","src","el","splice","removeIndex","notify","toRemove","_removeFromIndex","elements","parsed","isArray","v","iteratee","bindContext","collectionRef","CollectionConstructor","recordsOrIds","_super","subsetOfBehavior","_this","refs","toArray","tslib_1.__extends","SubsetOfCollection","a_elements","resolvedWith","add","resolveRefs","transactionApi","concat","reset","delaySet","objOrId","copy","comparator","raw","modelOrId","val","toggle","set","Error","addAll","master","records","elements_1","tools.notEqual","setPrototypeOf","__proto__","__assign","n","levelToNumber","none","error","warn","info","log","debug","a_level","a_msg","a_props","msg","props","level","levelAsNumber","throw","logger","stop","process","env","NODE_ENV","console","args","name_1","names","prop","o","protoProps","staticProps","defineMixin","getStaticDefinitions","onDefine","definitions","mergeInheritedMembers","statics","TheSubclass","mergeRules","appliedMixins","transform","mixins_1","mixin","sourceMixins","ctors","ctors_1","forEachOwnProp","assignProperty","mixinRules","protoValue","baseProto","function","caller","list","pipe","classFirst","classLast","EventMap","handlers","addEventsMap","getBubblingHandler","EventDescriptor","event_1","event_2","handler","strings","once","initialize","Messenger","localEvents","properties","eventsMap","defineProperties","toPropertyDescriptor","addReference","a_source","removeAll","second","_disposed","stopListening","Events","omit","extend","tools.assign","tools.log","_validateNested","ValidationError","each","eachError","splitTail","substr","pop","cidPrefix","Transactional_1","_owner","_ownerKey","listenTo","update","__inner_state__","data","resolveReference","_defaultStore","_validationError","validationError","getValidationError","_transaction","dirty","_isDirty","_changeToken","initiator","originalOptions","aquire","UpdateRecordMixin","attribute","propagateChanges","forceAttributeChange","a_values","changes","RecordTransaction","nested_1","nested_2","changes_1","emptyOptions","getHooks","transforms","changeHandlers","changeEvents","defaultValue","tools.isValidJSON","JSON","stringify","isRequired","wrapIsRequired","convert","getHook_1","getHook","reduce","chainGetHooks","validate_1","chainTransforms","handleChange","chainChangeHandlers","setAttribute","isChanged","text","getClassName","Record","Attribute definition","Prev. value","New value","AggregatedType","canBeUpdated","nestedTransaction","persistent","_handleChange","check","metadata","definitionDecorator","emptyFunction","changed","eventMap","trigger","cloned","_isRequired","asProp","_has","DateType","toISOString","msDatePattern","MSDateType","msDate","TimestampType","microsoft","supportsDate","safeParseDate","ImmutableClassType","PrimitiveType","NumericType","num","isFinite","Integer","integer","window","ArrayType","ObjectType","FunctionType","doNothing","shareAndListen","share","SharedType","implicitObject","attributesDefinition","baseClassAttributes","myAttributes","_.transform","createAttribute","allAttributes","_.defaults","ConstructorsMixin","constructorsMixin","_attributesArray","createPropertyDescriptor","_toJSON","createToJSON","parseMixin","localEventsMixin","isEmpty","_cidCounter","typeCheck","diff","old","nullify","forEachAttr","_attributesArray_1","pinStore","errors","json","asJson","l","newModel","clear","Attributes definition:","Collection","BaseRecordAttributes","BaseRecordAttributesCopy","IdAttribute","DefaultCollection","createSharedTypeSpec","dynamicMixin","_c","added_1","_d","removed_1","_e","_count","CollectionRefsType","emptySetTransaction","toElements","subset","SubsetOf","subsetOf","_SubsetOf","RefsCollection","Refs","Subset","itemEvents","aa","bb","_store","toPredicateFunction","find","mapped","count","a_index","aggregated","previousModels","addTransaction","removeMany","removeOne","remove","setTransaction","a_next","Argument","Attributes spec","RecordRefType","from","masterCollection","getMasterCollection","parseReference","defineSubsetCollection","Store","store","global","listenToOnce","DefaultRecord","Model","method","attrName","getMetadata"],"mappings":"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"}